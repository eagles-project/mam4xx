// mam4xx: Copyright (c) 2022,
// Battelle Memorial Institute and
// National Technology & Engineering Solutions of Sandia, LLC (NTESS)
// SPDX-License-Identifier: BSD-3-Clause

#ifndef MAM4XX_COAGULATION_HPP
#define MAM4XX_COAGULATION_HPP

#include <mam4xx/aero_config.hpp>
#include <mam4xx/mam4_types.hpp>

#include <Kokkos_Array.hpp>
#include <haero/atmosphere.hpp>
#include <haero/constants.hpp>
#include <haero/haero.hpp>
#include <haero/surface.hpp>
#include <iomanip>
#include <iostream>

namespace mam4 {

/// @class Coagulation
/// This class implements MAM4's gas/aersol exchange  parameterization. Its
/// structure is defined by the usage of the impl_ member in the AeroProcess
/// class in
/// ../aero_process.hpp.
class Coagulation {
public:
  // number of coagulation pairs
  static constexpr int max_coagpair = 3;

  // Todo: This should be resolved back to Aging
  static constexpr int i_agepair_pca = 0;

  // process-specific configuration data (if any)
  struct Config {
    Config() {}
    Config(const Config &) = default;
    ~Config() = default;
    Config &operator=(const Config &) = default;
  };

  // name -- unique name of the process implemented by this class
  const char *name() const { return "MAM4 Coagulation"; }

  // init -- initializes the implementation with MAM4's configuration
  void init(const AeroConfig &aero_config,
            const Config &process_config = Config());

  // validate -- validates the given atmospheric state and prognostics against
  // assumptions made by this implementation, returning true if the states are
  // valid, false if not
  KOKKOS_INLINE_FUNCTION
  bool validate(const AeroConfig &config, const ThreadTeam &team,
                const Atmosphere &atm, const Surface &sfc,
                const Prognostics &progs) const {
    // TODO
    return true;
  }

  // compute_tendencies -- computes tendencies and updates diagnostics
  // NOTE: that both diags and tends are const below--this means their views
  // NOTE: are fixed, but the data in those views is allowed to vary.
  KOKKOS_INLINE_FUNCTION
  void compute_tendencies(const AeroConfig &config, const ThreadTeam &team,
                          Real t, Real dt, const Atmosphere &atm,
                          const Surface &sfc, const Prognostics &progs,
                          const Diagnostics &diags,
                          const Tendencies &tends) const;

private:
  // Gas-Aerosol-Exchange-specific configuration
  Config config_;
};

namespace coagulation {

KOKKOS_INLINE_FUNCTION
Real bm0ij_data(const int n1, const int n2a, const int n2n) {
  const Real bm0ij[10][10][10] = {
      {{0.628539, 0.63961, 0.664514, 0.696278, 0.731558, 0.768211, 0.80448,
        0.83883, 0.870024, 0.897248},
       {0.639178, 0.649966, 0.674432, 0.705794, 0.740642, 0.776751, 0.812323,
        0.845827, 0.876076, 0.902324},
       {0.663109, 0.673464, 0.697147, 0.727637, 0.761425, 0.796155, 0.829978,
        0.861419, 0.889424, 0.913417},
       {0.693693, 0.703654, 0.726478, 0.755786, 0.78798, 0.820626, 0.851898,
        0.880459, 0.905465, 0.926552},
       {0.727803, 0.737349, 0.75914, 0.78687, 0.816901, 0.846813, 0.874906,
        0.90006, 0.921679, 0.939614},
       {0.763461, 0.772483, 0.79293, 0.818599, 0.845905, 0.87255, 0.897051,
        0.918552, 0.936701, 0.951528},
       {0.799021, 0.807365, 0.826094, 0.84923, 0.873358, 0.896406, 0.917161,
        0.935031, 0.949868, 0.961828},
       {0.833004, 0.840514, 0.857192, 0.877446, 0.898147, 0.917518, 0.934627,
        0.949106, 0.960958, 0.970403},
       {0.864172, 0.870734, 0.885153, 0.902373, 0.91964, 0.935494, 0.949257,
        0.960733, 0.970016, 0.977346},
       {0.891658, 0.897227, 0.909343, 0.923588, 0.937629, 0.950307, 0.961151,
        0.970082, 0.977236, 0.982844}},
      {{0.658724, 0.670587, 0.697539, 0.73189, 0.769467, 0.807391, 0.84341,
        0.875847, 0.9037, 0.926645},
       {0.66707, 0.67882, 0.705538, 0.739591, 0.776758, 0.814118, 0.849415,
        0.88102, 0.908006, 0.930121},
       {0.686356, 0.697839, 0.723997, 0.757285, 0.793389, 0.829313, 0.862835,
        0.892459, 0.917432, 0.937663},
       {0.711425, 0.722572, 0.747941, 0.780055, 0.814518, 0.848315, 0.879335,
        0.90629, 0.928658, 0.946526},
       {0.739575, 0.750307, 0.774633, 0.805138, 0.837408, 0.868504, 0.896517,
        0.920421, 0.939932, 0.955299},
       {0.769143, 0.779346, 0.802314, 0.830752, 0.860333, 0.8883, 0.913014,
        0.933727, 0.95037, 0.963306},
       {0.7989, 0.808431, 0.8297, 0.855653, 0.882163, 0.906749, 0.928075,
        0.945654, 0.959579, 0.97028},
       {0.827826, 0.836542, 0.855808, 0.878954, 0.902174, 0.923316, 0.941345,
        0.955989, 0.96745, 0.976174},
       {0.855068, 0.862856, 0.8799, 0.900068, 0.919956, 0.937764, 0.952725,
        0.964726, 0.974027, 0.981053},
       {0.879961, 0.886755, 0.901484, 0.918665, 0.935346, 0.950065, 0.962277,
        0.971974, 0.979432, 0.985033}},
      {{0.724166, 0.735474, 0.761359, 0.794045, 0.828702, 0.862061, 0.891995,
        0.917385, 0.937959, 0.954036},
       {0.730416, 0.74178, 0.767647, 0.800116, 0.834344, 0.867093, 0.896302,
        0.920934, 0.94079, 0.956237},
       {0.745327, 0.756664, 0.782255, 0.814026, 0.847107, 0.878339, 0.90582,
        0.928699, 0.946931, 0.960977},
       {0.765195, 0.776312, 0.801216, 0.831758, 0.863079, 0.892159, 0.917319,
        0.937939, 0.954145, 0.966486},
       {0.787632, 0.798347, 0.822165, 0.850985, 0.880049, 0.906544, 0.929062,
        0.947218, 0.961288, 0.971878},
       {0.811024, 0.821179, 0.843557, 0.870247, 0.896694, 0.920365, 0.940131,
        0.955821, 0.96782, 0.976753},
       {0.834254, 0.843709, 0.864356, 0.888619, 0.912245, 0.933019, 0.950084,
        0.963438, 0.97353, 0.980973},
       {0.856531, 0.865176, 0.883881, 0.905544, 0.92629, 0.944236, 0.958762,
        0.969988, 0.978386, 0.98453},
       {0.877307, 0.88507, 0.901716, 0.920729, 0.938663, 0.953951, 0.966169,
        0.975512, 0.982442, 0.987477},
       {0.896234, 0.903082, 0.917645, 0.934069, 0.949354, 0.962222, 0.972396,
        0.980107, 0.985788, 0.989894}},
      {{0.799294, 0.809144, 0.831293, 0.858395, 0.885897, 0.911031, 0.932406,
        0.949642, 0.963001, 0.973062},
       {0.804239, 0.814102, 0.836169, 0.862984, 0.890003, 0.914535, 0.935274,
        0.95191, 0.964748, 0.974381},
       {0.81591, 0.825708, 0.847403, 0.873389, 0.899185, 0.922275, 0.941543,
        0.956826, 0.968507, 0.977204},
       {0.831348, 0.840892, 0.861793, 0.886428, 0.910463, 0.931614, 0.948993,
        0.962593, 0.972872, 0.980456},
       {0.848597, 0.857693, 0.877402, 0.900265, 0.92218, 0.941134, 0.956464,
        0.968298, 0.977143, 0.983611},
       {0.866271, 0.874764, 0.892984, 0.913796, 0.933407, 0.950088, 0.96338,
        0.973512, 0.981006, 0.98644},
       {0.88343, 0.891216, 0.907762, 0.926388, 0.94366, 0.958127, 0.969499,
        0.97807, 0.984351, 0.988872},
       {0.899483, 0.906505, 0.921294, 0.937719, 0.952729, 0.965131, 0.974762,
        0.98195, 0.987175, 0.990912},
       {0.914096, 0.920337, 0.933373, 0.947677, 0.960579, 0.971111, 0.979206,
        0.985196, 0.98952, 0.992597},
       {0.927122, 0.932597, 0.943952, 0.956277, 0.967268, 0.976147, 0.982912,
        0.987882, 0.99145, 0.993976}},
      {{0.865049, 0.872851, 0.8899, 0.909907, 0.92929, 0.946205, 0.959991,
        0.970706, 0.978764, 0.984692},
       {0.868989, 0.876713, 0.893538, 0.913173, 0.93208, 0.948484, 0.961785,
        0.97208, 0.979796, 0.985457},
       {0.87801, 0.885524, 0.901756, 0.920464, 0.938235, 0.953461, 0.965672,
        0.975037, 0.982005, 0.987085},
       {0.889534, 0.896698, 0.912012, 0.929395, 0.945647, 0.959366, 0.970227,
        0.978469, 0.984547, 0.98895},
       {0.902033, 0.908713, 0.922848, 0.938648, 0.953186, 0.965278, 0.974729,
        0.981824, 0.987013, 0.990746},
       {0.914496, 0.920599, 0.933389, 0.947485, 0.960262, 0.970743, 0.978839,
        0.984858, 0.989225, 0.992348},
       {0.926281, 0.931761, 0.943142, 0.955526, 0.9666, 0.975573, 0.982431,
        0.987485, 0.991128, 0.993718},
       {0.937029, 0.941877, 0.951868, 0.962615, 0.972112, 0.979723, 0.985488,
        0.989705, 0.992725, 0.994863},
       {0.94658, 0.950819, 0.959494, 0.968732, 0.976811, 0.983226, 0.988047,
        0.99155, 0.994047, 0.995806},
       {0.954909, 0.958581, 0.966049, 0.973933, 0.980766, 0.986149, 0.990166,
        0.99307, 0.99513, 0.996577}},
      {{0.914182, 0.919824, 0.931832, 0.945387, 0.957999, 0.968606, 0.976982,
        0.983331, 0.988013, 0.991407},
       {0.917139, 0.922665, 0.934395, 0.94758, 0.959792, 0.970017, 0.978062,
        0.984138, 0.988609, 0.991843},
       {0.923742, 0.92899, 0.940064, 0.952396, 0.963699, 0.97307, 0.980381,
        0.985866, 0.989878, 0.992768},
       {0.93187, 0.936743, 0.946941, 0.958162, 0.968318, 0.97664, 0.983069,
        0.987853, 0.99133, 0.993822},
       {0.940376, 0.944807, 0.954004, 0.963999, 0.972928, 0.980162, 0.985695,
        0.989779, 0.992729, 0.994833},
       {0.948597, 0.952555, 0.960703, 0.969454, 0.977181, 0.983373, 0.988067,
        0.991507, 0.993977, 0.99573},
       {0.956167, 0.959648, 0.966763, 0.974326, 0.980933, 0.986177, 0.990121,
        0.992993, 0.995045, 0.996495},
       {0.962913, 0.965937, 0.97208, 0.978552, 0.984153, 0.988563, 0.991857,
        0.994242, 0.995938, 0.997133},
       {0.968787, 0.971391, 0.976651, 0.982148, 0.986869, 0.99056, 0.993301,
        0.995275, 0.996675, 0.997657},
       {0.973822, 0.976047, 0.980523, 0.98517, 0.989134, 0.992215, 0.994491,
        0.996124, 0.997277, 0.998085}},
      {{0.94741, 0.951207, 0.959119, 0.967781, 0.975592, 0.981981, 0.986915,
        0.99059, 0.993266, 0.995187},
       {0.949477, 0.953161, 0.960824, 0.969187, 0.976702, 0.982831, 0.98755,
        0.991057, 0.993606, 0.995434},
       {0.954008, 0.957438, 0.964537, 0.972232, 0.979095, 0.984653, 0.988907,
        0.992053, 0.99433, 0.995958},
       {0.959431, 0.962539, 0.968935, 0.975808, 0.981882, 0.986759, 0.990466,
        0.99319, 0.995153, 0.996552},
       {0.964932, 0.967693, 0.973342, 0.979355, 0.98462, 0.988812, 0.991974,
        0.994285, 0.995943, 0.997119},
       {0.970101, 0.972517, 0.977428, 0.982612, 0.98711, 0.990663, 0.993326,
        0.995261, 0.996644, 0.997621},
       {0.974746, 0.976834, 0.981055, 0.985475, 0.98928, 0.992265, 0.994488,
        0.996097, 0.997241, 0.998048},
       {0.978804, 0.980591, 0.984187, 0.987927, 0.991124, 0.993617, 0.995464,
        0.996795, 0.997739, 0.998403},
       {0.98228, 0.983799, 0.986844, 0.989991, 0.992667, 0.994742, 0.996273,
        0.997372, 0.998149, 0.998695},
       {0.985218, 0.986503, 0.989071, 0.991711, 0.993945, 0.995669, 0.996937,
        0.997844, 0.998484, 0.998932}},
      {{0.968507, 0.970935, 0.975916, 0.981248, 0.985947, 0.989716, 0.99258,
        0.994689, 0.99621, 0.997297},
       {0.96987, 0.97221, 0.977002, 0.982119, 0.986619, 0.990219, 0.992951,
        0.994958, 0.996405, 0.997437},
       {0.97282, 0.974963, 0.979339, 0.983988, 0.988054, 0.991292, 0.993738,
        0.995529, 0.996817, 0.997734},
       {0.97628, 0.978186, 0.98206, 0.986151, 0.989706, 0.99252, 0.994636,
        0.996179, 0.997284, 0.998069},
       {0.979711, 0.981372, 0.984735, 0.988263, 0.991309, 0.993706, 0.995499,
        0.996801, 0.99773, 0.998389},
       {0.982863, 0.984292, 0.987172, 0.990174, 0.99275, 0.994766, 0.996266,
        0.997352, 0.998125, 0.99867},
       {0.985642, 0.986858, 0.989301, 0.991834, 0.993994, 0.995676, 0.996923,
        0.997822, 0.99846, 0.99891},
       {0.988029, 0.989058, 0.991116, 0.99324, 0.995043, 0.99644, 0.997472,
        0.998214, 0.998739, 0.999108},
       {0.990046, 0.990912, 0.99264, 0.994415, 0.995914, 0.997073, 0.997925,
        0.998536, 0.998968, 0.999271},
       {0.991732, 0.992459, 0.993906, 0.995386, 0.996633, 0.997592, 0.998296,
        0.998799, 0.999154, 0.999403}},
      {{0.981392, 0.982893, 0.985938, 0.989146, 0.991928, 0.994129, 0.995783,
        0.996991, 0.997857, 0.998473},
       {0.982254, 0.983693, 0.986608, 0.989673, 0.992328, 0.994424, 0.995998,
        0.997146, 0.997969, 0.998553},
       {0.984104, 0.985407, 0.98804, 0.990798, 0.993178, 0.995052, 0.996454,
        0.997474, 0.998204, 0.998722},
       {0.986243, 0.987386, 0.989687, 0.992087, 0.994149, 0.995765, 0.996971,
        0.997846, 0.99847, 0.998913},
       {0.988332, 0.989313, 0.991284, 0.993332, 0.995082, 0.996449, 0.997465,
        0.9982, 0.998723, 0.999093},
       {0.99022, 0.991053, 0.992721, 0.994445, 0.995914, 0.997056, 0.997902,
        0.998513, 0.998947, 0.999253},
       {0.991859, 0.992561, 0.993961, 0.995403, 0.996626, 0.997574, 0.998274,
        0.998778, 0.999136, 0.999387},
       {0.99325, 0.993837, 0.995007, 0.996208, 0.997223, 0.998007, 0.998584,
        0.998999, 0.999293, 0.999499},
       {0.994413, 0.994903, 0.995878, 0.996876, 0.997716, 0.998363, 0.998839,
        0.99918, 0.999421, 0.999591},
       {0.995376, 0.995785, 0.996597, 0.997425, 0.998121, 0.998655, 0.999048,
        0.999328, 0.999526, 0.999665}},
      {{0.989082, 0.989991, 0.991819, 0.993723, 0.995357, 0.996637, 0.997592,
        0.998286, 0.998781, 0.999132},
       {0.989613, 0.99048, 0.992224, 0.994039, 0.995594, 0.99681, 0.997717,
        0.998375, 0.998845, 0.999178},
       {0.990744, 0.991523, 0.993086, 0.994708, 0.996094, 0.997176, 0.997981,
        0.998564, 0.99898, 0.999274},
       {0.992041, 0.992716, 0.99407, 0.99547, 0.996662, 0.997591, 0.99828,
        0.998778, 0.999133, 0.999383},
       {0.993292, 0.993867, 0.995015, 0.996199, 0.997205, 0.997985, 0.998564,
        0.998981, 0.999277, 0.999487},
       {0.994411, 0.994894, 0.995857, 0.996847, 0.997685, 0.998334, 0.998814,
        0.999159, 0.999404, 0.999577},
       {0.995373, 0.995776, 0.996577, 0.9974, 0.998094, 0.99863, 0.999026,
        0.99931, 0.999512, 0.999654},
       {0.996181, 0.996516, 0.997181, 0.997861, 0.998435, 0.998877, 0.999202,
        0.999435, 0.999601, 0.999717},
       {0.996851, 0.997128, 0.99768, 0.998242, 0.998715, 0.999079, 0.999346,
        0.999538, 0.999673, 0.999769},
       {0.997402, 0.997632, 0.998089, 0.998554, 0.998945, 0.999244, 0.999464,
        0.999622, 0.999733, 0.999811}}};

  return bm0ij[n1][n2a][n2n];
}

// ---------------------------------------------------------------
// Purpose: calculate the intermodal coagulation rate for the 0th moment
//          using an  analytic expression from Whitby et al. (1991).
// History:
//  - Original code taken from CMAG v4.6 code and ported to CAM
//    by Richard C. Easter, 2007.
//  - Contents here wrapped in a separate subroutine by
//    Hui Wan, 2022 following a suggestion from Balwinder Singh.
//---------------------------------------------------------------

KOKKOS_INLINE_FUNCTION
void intermodal_coag_rate_for_0th_moment(
    const Real a_const, const Real r1, const Real r2, const Real rx4,
    const Real ri1, const Real ri2, const Real ri3, const Real knc,
    const Real kngat, const Real kngac, const Real kfmatac, const Real sqdgat,
    const Real esat01, const Real esat04, const Real esat09, const Real esat16,
    const Real esac01, const Real esac04, const Real esac09, const Real esac16,
    const int n1, const int n2a, const int n2n, Real &qn12) {

  const Real bm0ij = bm0ij_data(n1, n2n, n2a);

  // --------------
  // Calculations
  // --------------
  // Near-continuum form:  equation h.10a of whitby et al. (1991)

  const Real coagnc0 =
      knc * (2.0 +
             a_const * (kngat * (esat04 + r2 * esat16 * esac04) +
                        kngac * (esac04 + ri2 * esac16 * esat04)) +
             (r2 + ri2) * esat04 * esac04);

  // Free-molecular form:  equation h.7a of whitby et al. (1991)
  const Real coagfm0 = kfmatac * sqdgat * bm0ij *
                       (esat01 + r1 * esac01 + 2.0 * r2 * esat01 * esac04 +
                        rx4 * esat09 * esac16 + ri3 * esat16 * esac09 +
                        2.0 * ri1 * esat04 + esac01);

  // Harmonic mean
  qn12 = coagnc0 * coagfm0 / (coagnc0 + coagfm0);
}

KOKKOS_INLINE_FUNCTION
Real bm3i_data(const int n1, const int n2a, const int n2n) {
  // rpm....   3rd moment nuclei mode corr. fac. for bimodal fm coag rate
  // m3 intermodal fm-rpm values

  const Real bm3i[10][10][10] = {
      {{0.70708, 0.71681, 0.73821, 0.76477, 0.7935, 0.82265, 0.8509, 0.87717,
        0.90069, 0.92097},
       {0.72172, 0.73022, 0.74927, 0.77324, 0.79936, 0.82601, 0.85199, 0.87637,
        0.89843, 0.91774},
       {0.78291, 0.78896, 0.80286, 0.8207, 0.84022, 0.85997, 0.87901, 0.89669,
        0.91258, 0.92647},
       {0.8776, 0.88147, 0.89025, 0.90127, 0.91291, 0.9242, 0.93452, 0.94355,
        0.95113, 0.95726},
       {0.94988, 0.95184, 0.95612, 0.96122, 0.96628, 0.97085, 0.97467, 0.97763,
        0.97971, 0.98089},
       {0.98318, 0.98393, 0.98551, 0.98728, 0.98889, 0.99014, 0.99095, 0.99124,
        0.991, 0.9902},
       {0.9948, 0.99504, 0.99551, 0.99598, 0.99629, 0.99635, 0.99611, 0.9955,
        0.9945, 0.99306},
       {0.99842, 0.99848, 0.99858, 0.99861, 0.9985, 0.99819, 0.99762, 0.99674,
        0.9955, 0.99388},
       {0.99951, 0.99951, 0.99949, 0.99939, 0.99915, 0.99872, 0.99805, 0.99709,
        0.99579, 0.99411},
       {0.99984, 0.99982, 0.99976, 0.99962, 0.99934, 0.99888, 0.99818, 0.99719,
        0.99587, 0.99417}},
      {{0.72957, 0.73993, 0.76303, 0.79178, 0.82245, 0.8527, 0.88085, 0.90578,
        0.92691, 0.94415},
       {0.72319, 0.7332, 0.75547, 0.78323, 0.81307, 0.84287, 0.87107, 0.89651,
        0.91852, 0.93683},
       {0.74413, 0.75205, 0.76998, 0.79269, 0.81746, 0.84258, 0.86685, 0.88938,
        0.90953, 0.92695},
       {0.82588, 0.83113, 0.84309, 0.85825, 0.87456, 0.89072, 0.90594, 0.91972,
        0.93178, 0.94203},
       {0.91886, 0.92179, 0.92831, 0.93624, 0.94434, 0.95192, 0.95856, 0.96409,
        0.96845, 0.97164},
       {0.97129, 0.97252, 0.97515, 0.97818, 0.98108, 0.98354, 0.98542, 0.98665,
        0.98721, 0.98709},
       {0.99104, 0.99145, 0.9923, 0.9932, 0.99394, 0.99439, 0.99448, 0.99416,
        0.9934, 0.99217},
       {0.9973, 0.99741, 0.99763, 0.99779, 0.99782, 0.99762, 0.99715, 0.99636,
        0.99519, 0.99363},
       {0.99917, 0.99919, 0.99921, 0.99915, 0.99895, 0.99856, 0.99792, 0.99698,
        0.9957, 0.99404},
       {0.99973, 0.99973, 0.99968, 0.99955, 0.99928, 0.99883, 0.99814, 0.99716,
        0.99584, 0.99415}},
      {{0.78358, 0.79304, 0.81445, 0.84105, 0.86873, 0.89491, 0.91805, 0.93743,
        0.953, 0.9651},
       {0.76412, 0.77404, 0.79635, 0.82404, 0.85312, 0.88101, 0.9061, 0.92751,
        0.945, 0.95879},
       {0.74239, 0.75182, 0.77301, 0.79956, 0.82809, 0.85639, 0.88291, 0.90658,
        0.92683, 0.9435},
       {0.78072, 0.78758, 0.80317, 0.82293, 0.84437, 0.86589, 0.88643, 0.90526,
        0.92194, 0.93625},
       {0.87627, 0.88044, 0.88981, 0.90142, 0.91357, 0.92524, 0.93585, 0.9451,
        0.95285, 0.95911},
       {0.95176, 0.95371, 0.95796, 0.96297, 0.96792, 0.97233, 0.97599, 0.9788,
        0.98072, 0.98178},
       {0.98453, 0.98523, 0.9867, 0.98833, 0.9898, 0.99092, 0.9916, 0.99179,
        0.99145, 0.99058},
       {0.99534, 0.99555, 0.99597, 0.99637, 0.99662, 0.99663, 0.99633, 0.99569,
        0.99465, 0.99318},
       {0.99859, 0.99864, 0.99872, 0.99873, 0.9986, 0.99827, 0.99768, 0.99679,
        0.99555, 0.99391},
       {0.99956, 0.99956, 0.99953, 0.99942, 0.99918, 0.99875, 0.99807, 0.99711,
        0.9958, 0.99412}},
      {{0.84432, 0.85223, 0.8699, 0.89131, 0.9128, 0.93223, 0.94861, 0.96172,
        0.97185, 0.97945},
       {0.82299, 0.83164, 0.85101, 0.87463, 0.89857, 0.9205, 0.93923, 0.95443,
        0.96629, 0.97529},
       {0.7787, 0.7884, 0.81011, 0.8369, 0.86477, 0.89124, 0.91476, 0.9346,
        0.95063, 0.96316},
       {0.76386, 0.77233, 0.79147, 0.81557, 0.84149, 0.86719, 0.89126, 0.91275,
        0.93116, 0.94637},
       {0.82927, 0.83488, 0.84756, 0.86346, 0.8804, 0.89704, 0.91257, 0.92649,
        0.93857, 0.94874},
       {0.92184, 0.92481, 0.93136, 0.93925, 0.94724, 0.95462, 0.96104, 0.96634,
        0.97048, 0.97348},
       {0.97341, 0.97457, 0.97706, 0.97991, 0.9826, 0.98485, 0.98654, 0.9876,
        0.98801, 0.98777},
       {0.99192, 0.99229, 0.99305, 0.99385, 0.99449, 0.99486, 0.99487, 0.99449,
        0.99367, 0.99239},
       {0.99758, 0.99768, 0.99787, 0.998, 0.99799, 0.99777, 0.99727, 0.99645,
        0.99527, 0.99369},
       {0.99926, 0.99928, 0.99928, 0.99921, 0.999, 0.9986, 0.99795, 0.99701,
        0.99572, 0.99405}},
      {{0.89577, 0.9019, 0.91522, 0.93076, 0.94575, 0.95876, 0.96932, 0.97751,
        0.98367, 0.9882},
       {0.8786, 0.88547, 0.90052, 0.91828, 0.93557, 0.95075, 0.96319, 0.97292,
        0.98028, 0.98572},
       {0.83381, 0.8424, 0.86141, 0.88425, 0.90707, 0.9277, 0.9451, 0.95906,
        0.96986, 0.97798},
       {0.7853, 0.79463, 0.8155, 0.84127, 0.86813, 0.89367, 0.91642, 0.93566,
        0.95125, 0.96347},
       {0.79614, 0.80332, 0.81957, 0.84001, 0.8619, 0.88351, 0.90368, 0.92169,
        0.93718, 0.95006},
       {0.88192, 0.88617, 0.89565, 0.90728, 0.91931, 0.93076, 0.94107, 0.94997,
        0.95739, 0.96333},
       {0.95509, 0.95698, 0.96105, 0.96583, 0.97048, 0.9746, 0.97796, 0.9805,
        0.98218, 0.98304},
       {0.98596, 0.9866, 0.98794, 0.98943, 0.99074, 0.99172, 0.99227, 0.99235,
        0.99192, 0.99096},
       {0.99581, 0.996, 0.99637, 0.99672, 0.99691, 0.99687, 0.99653, 0.99585,
        0.99478, 0.99329},
       {0.99873, 0.99878, 0.99884, 0.99883, 0.99869, 0.99834, 0.99774, 0.99684,
        0.99558, 0.99394}},
      {{0.93335, 0.93777, 0.94711, 0.95764, 0.96741, 0.97562, 0.9821, 0.98701,
        0.99064, 0.99327},
       {0.92142, 0.92646, 0.93723, 0.94947, 0.96096, 0.97069, 0.97842, 0.98431,
        0.98868, 0.99186},
       {0.88678, 0.89351, 0.9081, 0.92508, 0.94138, 0.95549, 0.96693, 0.97578,
        0.98243, 0.98731},
       {0.83249, 0.84124, 0.86051, 0.88357, 0.90655, 0.92728, 0.94477, 0.9588,
        0.96964, 0.97779},
       {0.79593, 0.80444, 0.82355, 0.84725, 0.87211, 0.89593, 0.91735, 0.93566,
        0.95066, 0.96255},
       {0.84124, 0.84695, 0.8598, 0.87575, 0.89256, 0.90885, 0.92383, 0.93704,
        0.9483, 0.95761},
       {0.92721, 0.93011, 0.93647, 0.94406, 0.95166, 0.95862, 0.9646, 0.96949,
        0.97326, 0.97595},
       {0.97573, 0.97681, 0.97913, 0.98175, 0.98421, 0.98624, 0.98772, 0.9886,
        0.98885, 0.98847},
       {0.99271, 0.99304, 0.99373, 0.99444, 0.99499, 0.99528, 0.99522, 0.99477,
        0.9939, 0.99258},
       {0.99782, 0.99791, 0.99807, 0.99817, 0.99813, 0.99788, 0.99737, 0.99653,
        0.99533, 0.99374}},
      {{0.95858, 0.96158, 0.9678, 0.9746, 0.98073, 0.98575, 0.98963, 0.99252,
        0.99463, 0.99615},
       {0.95091, 0.95438, 0.96163, 0.96962, 0.97688, 0.98286, 0.98751, 0.99099,
        0.99353, 0.99536},
       {0.92751, 0.93233, 0.94255, 0.95406, 0.96473, 0.97366, 0.9807, 0.98602,
        0.98994, 0.99278},
       {0.88371, 0.89075, 0.90595, 0.92351, 0.94028, 0.95474, 0.96642, 0.97544,
        0.9822, 0.98715},
       {0.8288, 0.8375, 0.85671, 0.8798, 0.90297, 0.92404, 0.94195, 0.95644,
        0.96772, 0.97625},
       {0.81933, 0.82655, 0.84279, 0.86295, 0.88412, 0.90449, 0.92295, 0.9389,
        0.95215, 0.96281},
       {0.89099, 0.89519, 0.90448, 0.91577, 0.92732, 0.9382, 0.94789, 0.95616,
        0.96297, 0.96838},
       {0.95886, 0.96064, 0.96448, 0.96894, 0.97324, 0.97701, 0.98004, 0.98228,
        0.98371, 0.98435},
       {0.98727, 0.98786, 0.98908, 0.99043, 0.9916, 0.99245, 0.99288, 0.99285,
        0.99234, 0.99131},
       {0.99621, 0.99638, 0.99671, 0.997, 0.99715, 0.99707, 0.9967, 0.99599,
        0.99489, 0.99338}},
      {{0.9747, 0.97666, 0.98064, 0.98491, 0.98867, 0.99169, 0.99399, 0.99569,
        0.99691, 0.99779},
       {0.96996, 0.97225, 0.97693, 0.98196, 0.98643, 0.99003, 0.99279, 0.99482,
        0.9963, 0.99735},
       {0.95523, 0.95848, 0.96522, 0.9726, 0.97925, 0.98468, 0.98888, 0.992,
        0.99427, 0.9959},
       {0.92524, 0.9303, 0.94098, 0.95294, 0.96397, 0.97317, 0.98038, 0.98582,
        0.98981, 0.9927},
       {0.87576, 0.88323, 0.89935, 0.91799, 0.93583, 0.95126, 0.96377, 0.97345,
        0.98072, 0.98606},
       {0.83078, 0.83894, 0.85705, 0.87899, 0.90126, 0.92179, 0.9395, 0.95404,
        0.96551, 0.9743},
       {0.85727, 0.86294, 0.87558, 0.89111, 0.90723, 0.9226, 0.93645, 0.94841,
        0.95838, 0.96643},
       {0.93337, 0.93615, 0.9422, 0.94937, 0.95647, 0.96292, 0.9684, 0.97283,
        0.97619, 0.97854},
       {0.9779, 0.97891, 0.98105, 0.98346, 0.98569, 0.98751, 0.98879, 0.9895,
        0.98961, 0.98912},
       {0.99337, 0.99367, 0.9943, 0.99493, 0.99541, 0.99562, 0.99551, 0.99501,
        0.9941, 0.99274}},
      {{0.9847, 0.98594, 0.98844, 0.99106, 0.99334, 0.99514, 0.9965, 0.99749,
        0.99821, 0.99872},
       {0.98184, 0.9833, 0.98624, 0.98934, 0.99205, 0.9942, 0.99582, 0.99701,
        0.99787, 0.99848},
       {0.97288, 0.97498, 0.97927, 0.98385, 0.98789, 0.99113, 0.9936, 0.99541,
        0.99673, 0.99766},
       {0.95403, 0.95741, 0.9644, 0.97202, 0.97887, 0.98444, 0.98872, 0.9919,
        0.99421, 0.99586},
       {0.91845, 0.92399, 0.93567, 0.94873, 0.96076, 0.97079, 0.97865, 0.98457,
        0.98892, 0.99206},
       {0.86762, 0.87533, 0.89202, 0.91148, 0.93027, 0.94669, 0.96013, 0.97062,
        0.97855, 0.98441},
       {0.8455, 0.85253, 0.86816, 0.88721, 0.90671, 0.9249, 0.94083, 0.95413,
        0.96481, 0.97314},
       {0.90138, 0.90544, 0.91437, 0.92513, 0.93602, 0.94615, 0.95506, 0.96258,
        0.96868, 0.97347},
       {0.96248, 0.96415, 0.96773, 0.97187, 0.97583, 0.97925, 0.98198, 0.98394,
        0.98514, 0.98559},
       {0.98837, 0.98892, 0.99005, 0.99127, 0.99232, 0.99306, 0.99339, 0.99328,
        0.99269, 0.99161}},
      {{0.9908, 0.99158, 0.99311, 0.99471, 0.99607, 0.99715, 0.99795, 0.99853,
        0.99895, 0.99925},
       {0.9891, 0.99001, 0.99182, 0.99371, 0.99533, 0.99661, 0.99757, 0.99826,
        0.99876, 0.99912},
       {0.98374, 0.98506, 0.98772, 0.99051, 0.99294, 0.99486, 0.9963, 0.99736,
        0.99812, 0.99866},
       {0.97238, 0.97453, 0.97892, 0.98361, 0.98773, 0.99104, 0.99354, 0.99538,
        0.99671, 0.99765},
       {0.94961, 0.95333, 0.96103, 0.96941, 0.97693, 0.98303, 0.98772, 0.99119,
        0.99371, 0.99551},
       {0.90943, 0.9155, 0.92834, 0.94275, 0.95608, 0.96723, 0.976, 0.98263,
        0.98751, 0.99103},
       {0.86454, 0.872, 0.88829, 0.90749, 0.9263, 0.943, 0.95687, 0.96785,
        0.97626, 0.98254},
       {0.87498, 0.88048, 0.89264, 0.90737, 0.9224, 0.93642, 0.94877, 0.95917,
        0.96762, 0.97429},
       {0.93946, 0.94209, 0.94781, 0.95452, 0.96111, 0.96704, 0.97203, 0.97602,
        0.979, 0.98106},
       {0.97977, 0.98071, 0.9827, 0.98492, 0.98695, 0.98858, 0.9897, 0.99027,
        0.99026, 0.98968}}};

  return bm3i[n1][n2a][n2n];
}

// ---------------------------------------------------------------------------
// Purpose: calculate the intermodal coagulation rate for the 3rd moment
//          using an  analytic expression from Whitby et al. (1991).
// History:
//  - Original code taken from CMAG v4.6 code and ported to CAM
//    by Richard C. Easter, 2007.
//  - Contents here wrapped in a separate subroutine by
//    Hui Wan, 2022 following a suggestion from Balwinder Singh.
// ---------------------------------------------------------------------------
KOKKOS_INLINE_FUNCTION
void intermodal_coag_rate_for_3rd_moment(
    const Real a_const, const Real r1, const Real r2, const Real rx4,
    const Real ri1, const Real ri2, const Real ri3, const Real knc,
    const Real kngat, const Real kngac, const Real dgat3, const Real kfmatac,
    const Real sqdgat7, const Real esat04, const Real esat09, const Real esat16,
    const Real esat25, const Real esat36, const Real esat49, const Real esat64,
    const Real esac01, const Real esac04, const Real esac09, const Real esac16,
    const Real esat100, const int n1, const int n2a, const int n2n,
    Real &qv12) {

  const Real bm3i = bm3i_data(n1, n2n, n2a);
  // --------------
  // Calculations
  // --------------
  // Near-continuum form: equation h.10b of whitby et al. (1991)

  const Real coagnc3 =
      knc * dgat3 *
      (2.0 * esat36 + a_const * kngat * (esat16 + r2 * esat04 * esac04) +
       a_const * kngac * (esat36 * esac04 + ri2 * esat64 * esac16) +
       r2 * esat16 * esac04 + ri2 * esat64 * esac04);

  // Free-molecular form: equation h.7b of whitby et al. (1991)
  const Real coagfm3 = kfmatac * sqdgat7 * bm3i *
                       (esat49 + r1 * esat36 * esac01 +
                        2.0 * r2 * esat25 * esac04 + rx4 * esat09 * esac16 +
                        ri3 * esat100 * esac09 + 2.0 * ri1 * esat64 * esac01);

  // Harmonic mean
  qv12 = coagnc3 * coagfm3 / (coagnc3 + coagfm3);
}

KOKKOS_INLINE_FUNCTION
void intramodal_coag_rate_for_0th_moment(const Real a_const, const Real knc,
                                         const Real kngxx, const Real kfmxx,
                                         const Real sqdgxx, const Real esxx01,
                                         const Real esxx04, const Real esxx05,
                                         const Real esxx08, const Real esxx20,
                                         const Real esxx25, const int n2x,
                                         Real &qnxx) {

  // rpm 0th moment correction factors for unimodal fm coagulation  rates
  // m0 intramodal fm - rpm values
  const Real bm0[10] = {0.707106785165097, 0.726148960080488, 0.766430744110958,
                        0.814106389441342, 0.861679526483207, 0.903600509090092,
                        0.936578814219156, 0.960098926735545, 0.975646823342881,
                        0.985397173215326};

  // -------------
  // Calculations
  // --------------
  // Near-continuum form: equation h.12a of whitby et al. (1991)
  const Real coagnc =
      knc * (1.0 + esxx08 + a_const * kngxx * (esxx20 + esxx04));

  // Free-molecular form: equation h.11a of whitby et al. (1991)
  const Real coagfm =
      kfmxx * sqdgxx * bm0[n2x] * (esxx01 + esxx25 + 2.0 * esxx05);

  // Harmonic mean
  qnxx = coagfm * coagnc / (coagfm + coagnc);
}

// --------------------------------------------------------
//  getcoags calculates the coagulation rates using a new
//     approximate algorithm for the 2nd moment.  the 0th and 3rd moments
//     are done by analytic expressions from whitby et al. (1991).  the
//     correction factors are also similar to those from whitby et al.
//     (1991), but are derived from the gauss-hermite numerical
//     quadratures used by binkowski and roselle (2003).
//
//  Revision history:
//   fsb 08/25/03 coded by dr. francis s. binkowksi
//   fsb 08/25/04 added in-line documentation
//   rce 04/15/2007
//    - code taken from cmaq v4.6 code; converted to f90;
//    - added "intent" to subr arguments;
//    - renamed "r4" & "dp" variables to "rx4" & "rx8";
//    - changed "real*N" declarations to "real(rN)" (N = 4 or 8)
//   Hui Wan, 2022: removed unused calculations;
//                  wrapped the calculation of different
//                  coagulation rates into separate subroutines
//                  following a suggestion from Balwinder Singh.
//
//  References:
//   1. whitby, e. r., p. h. mcmurry, u. shankar, and f. s. binkowski,
//   modal aerosol dynamics modeling, rep. 600/3-91/020, atmospheric
//   research and exposure assessment laboratory,
//   u.s. environmental protection agency, research triangle park, n.c.,
//   (ntis pb91-161729/as), 1991
//
//   2. binkowski, f.s. an u. shankar, the regional particulate matter
//   model 1. model decsription and preliminary results, journal of
//   geophysical research, 100, d12, pp 26,191-26,209,
//   december 20, 1995.
//
//   3. binkowski, f.s. and s.j. roselle, models-3 community
//   multiscale air quality (cmaq) model aerosol component 1:
//   model description.  j. geophys. res., vol 108, no d6, 4183
//   doi:10.1029/2001jd001409, 2003.
// --------------------------------------------------------
KOKKOS_INLINE_FUNCTION
void getcoags(const Real lamda, const Real kfmatac, const Real kfmat,
              const Real kfmac, const Real knc, const Real dgatk,
              const Real dgacc, const Real sgatk, const Real sgacc,
              const Real xxlsgat, const Real xxlsgac, Real &qn11, Real &qn22,
              Real &qn12, Real &qv12) {

  const Real a_const = 1.246;
  const Real esat01 = haero::exp(0.125 * xxlsgat * xxlsgat);
  const Real esac01 = haero::exp(0.125 * xxlsgac * xxlsgac);
  const Real sqrttwo = haero::sqrt(2.0);
  const Real dlgsqt2 = 1.0 / haero::log(sqrttwo);

  const Real esat04 = haero::pow(esat01, 4.0);
  const Real esac04 = haero::pow(esac01, 4.0);

  const Real esat05 = esat04 * esat01;
  const Real esac05 = esac04 * esac01;

  const Real esat08 = esat04 * esat04;
  const Real esac08 = esac04 * esac04;

  const Real esat09 = esat08 * esat01;
  const Real esac09 = esac08 * esac01;

  const Real esat16 = esat08 * esat08;
  const Real esac16 = esac08 * esac08;

  const Real esat20 = esat16 * esat04;
  const Real esac20 = esac16 * esac04;

  const Real esat24 = esat20 * esat04;

  const Real esat25 = esat20 * esat05;
  const Real esac25 = esac20 * esac05;

  const Real esat36 = esat20 * esat16;

  const Real esat49 = esat24 * esat25;

  const Real esat64 = esat20 * esat20 * esat24;

  const Real esat100 = esat64 * esat36;

  const Real dgat3 = dgatk * dgatk * dgatk;

  const Real sqdgat = haero::sqrt(dgatk);
  const Real sqdgac = haero::sqrt(dgacc);
  const Real sqdgat7 = dgat3 * sqdgat;

  const Real r1 = sqdgac / sqdgat;
  const Real r2 = r1 * r1;
  const Real rx4 = r2 * r2;
  const Real ri1 = 1.0 / r1;
  const Real ri2 = 1.0 / (r1 * r1);
  const Real ri3 = 1.0 / (r1 * r1 * r1);
  const Real kngat = 2.0 * lamda / dgatk;
  const Real kngac = 2.0 * lamda / dgacc;

  //  Calculate ratio of geometric mean diameters

  const Real rat = dgacc / dgatk;

  // Trap subscripts for bm0 and bm0i, between 1 and 10.
  // See page h.5 of whitby et al. (1991)
  const int n2n =
      haero::max(1, haero::min(10, haero::round(4.0 * (sgatk - 0.75)))) - 1;
  const int n2a =
      haero::max(1, haero::min(10, haero::round(4.0 * (sgacc - 0.75)))) - 1;
  const int n1 =
      haero::max(1,
                 haero::min(10, 1 + haero::round(dlgsqt2 * haero::log(rat)))) -
      1;

  // -----------------------------------------------------------------
  //  Aitken to accumulation mode coagulation rate for the 0th moment
  // -----------------------------------------------------------------
  intermodal_coag_rate_for_0th_moment(a_const, r1, r2, rx4, ri1, ri2, ri3, knc,
                                      kngat, kngac, kfmatac, sqdgat, esat01,
                                      esat04, esat09, esat16, esac01, esac04,
                                      esac09, esac16, n1, n2a, n2n, qn12);

  // -----------------------------------------------------------------
  // Aitken to accumulation mode coagulation rate for the 3rd moment
  // -----------------------------------------------------------------
  intermodal_coag_rate_for_3rd_moment(
      a_const, r1, r2, rx4, ri1, ri2, ri3, knc, kngat, kngac, dgat3, kfmatac,
      sqdgat7, esat04, esat09, esat16, esat25, esat36, esat49, esat64, esac01,
      esac04, esac09, esac16, esat100, n1, n2a, n2n, qv12);

  // --------------------------------------------------------
  // Intramodal coagulation (0th moment only), aitken mode
  // --------------------------------------------------------
  intramodal_coag_rate_for_0th_moment(a_const, knc, kngat, kfmat, sqdgat,
                                      esat01, esat04, esat05, esat08, esat20,
                                      esat25, n2n, qn11);

  // --------------------------------------------------------------
  // Intramodal coagulation (0th moment only), accumulation mode
  // --------------------------------------------------------------
  intramodal_coag_rate_for_0th_moment(a_const, knc, kngac, kfmac, sqdgac,
                                      esac01, esac04, esac05, esac08, esac20,
                                      esac25, n2a, qn22);
}

KOKKOS_INLINE_FUNCTION
void getcoags_wrapper_f(const Real airtemp, const Real airprs, const Real dgatk,
                        const Real dgacc, const Real sgatk, const Real sgacc,
                        const Real xxlsgat, const Real xxlsgac,
                        const Real pdensat, const Real pdensac, Real &betaij0,
                        Real &betaij3, Real &betaii0, Real &betajj0) {

  // -----------------------------------------------
  // Prepare input to getcoags
  // -----------------------------------------------
  const Real t0 = haero::Constants::freezing_pt_h2o + 15.0;
  const Real sqrt_temp = haero::sqrt(airtemp);

  // Calculate mean free path [m]:
  // 6.6328e-8 is the sea level value given in table i.2.8
  // on page 10 of u.s. standard atmosphere 1962
  // BAD CONSTANT
  const Real lamda =
      6.6328e-8 * haero::Constants::pressure_stp * airtemp / (t0 * airprs);

  //  Calculate dynamic viscosity [kg m**-1 s**-1]:
  // u.s. standard atmosphere 1962 page 14 expression
  // for dynamic viscosity is:
  // dynamic viscosity =  beta * t * sqrt(t) / ( t + s)
  // where beta = 1.458e-6 [kg s^-1 K**-0.5], s = 110.4 [K].
  const Real amu = 1.458e-6 * airtemp * sqrt_temp / (airtemp + 110.4);

  // Term used in equation a6 of binkowski & shankar (1995)
  // boltzmann BAD CONSTANT
  const Real boltzmann = 1.3806500000000000e-023;
  const Real knc = (2.0 / 3.0) * boltzmann * airtemp / amu;

  // Terms used in equation a5 of binkowski & shankar (1995)

  const Real kfmat = haero::sqrt(3.0 * boltzmann * airtemp / pdensat);
  const Real kfmac = haero::sqrt(3.0 * boltzmann * airtemp / pdensac);
  const Real kfmatac =
      haero::sqrt(6.0 * boltzmann * airtemp / (pdensat + pdensac));

  // -------------------------------------------------------------------------------------------------
  // Call subr. getcoags ported from the CMAQ model to calculate
  //  - intermodal coagulation coefficients of the 0th and 3rd moments;
  //  - intramodal coagulation coefficients of the 0th moment.
  // Note:
  //  - Coag. coefficients of the 0th moment (qn11, qn22, qn12) correspond to
  //  aerosol number changes;
  //  - Coag. coefficient  of the 3rd moment (qv12) correspond to aerosol mass
  //  changes.
  //-------------------------------------------------------------------------------------------------
  Real qn11, qn22, qn12, qv12;

  getcoags(lamda, kfmatac, kfmat, kfmac, knc, dgatk, dgacc, sgatk, sgacc,
           xxlsgat, xxlsgac, qn11, qn22, qn12, qv12);

  // --------------------------------------------------------------------
  //  Adjustments to the output from subr. getcoags
  // --------------------------------------------------------------------
  //  Clip negative values

  betaii0 = haero::max(0.0, qn11);
  betajj0 = haero::max(0.0, qn22);
  betaij0 = haero::max(0.0, qn12);

  // For the mass transfer, convert from the CMAQ model's coag rate parameters
  // to the MIRAGE2 model's parameters
  const Real dumatk3 =
      (haero::cube(dgatk) *
       haero::exp(4.5 * xxlsgat * xxlsgat)); // or unit conversion
  betaij3 = haero::max(0.0, qv12 / dumatk3);
}

// --------------------------------------------------------
// Purpose: update aerosol mass mixing ratios by taking into account
// coagulation-induced inter-modal
//          mass transfer.
//
// Assumed possible mass transfer pathways:
// - coag pair 1: aitken + accumulation -> accumulation
// - coag pair 2: pca    + accumulation -> accumulation
// - coag pair 3: aitken + pca          -> pca
//
// Sorted by mass source:
//  - From aitken mode:
//      - coag pair 1: aitken + accumulation -> accumulation
//      - coag pair 3: aitken + pca          -> pca
//  - From pca mode:
//      - coag pair 2: pca    + accumulation -> accumulation
//--------------------------------------------------------------------------------
// Numerical treatment:
//
// The transfer amounts are calculated using as an exponential decay of
// the initial mass mixing ratios,
// where the decay constant is calculated using the average (over one timestep)
// number mixing ratios for each mode
//
// The mass transfer calculations are first-order accurate in time,
// because the mass transferred out of a mode does not
// include any mass transferred in during the time step.
// With this approach, the ordering is not important, but the mass transfer
// calculations are done in the reverse order of the number loss calculations
// --------------------------------------------------------
KOKKOS_INLINE_FUNCTION
void mam_coag_aer_update(
    Real ybetaij3[Coagulation::max_coagpair], Real deltat,
    Real qnum_tavg[AeroConfig::num_modes()],
    Real qaer_bgn[AeroConfig::num_aerosol_ids()][AeroConfig::num_modes()],
    Real qaer_end[AeroConfig::num_aerosol_ids()][AeroConfig::num_modes()],
    Real qaer_del_coag_out[AeroConfig::num_aerosol_ids()]
                          [AeroConfig::max_agepair()]) {

  const int num_aer = AeroConfig::num_aerosol_ids();
  // --------------------------------------------------------------------
  // Initialize the array that will be passed onto aging
  // --------------------------------------------------------------------
  for (int ispec = 0; ispec < num_aer; ++ispec) {
    for (int imode = 0; imode < AeroConfig::max_agepair(); ++imode) {
      qaer_del_coag_out[ispec][imode] = 0.0;
    }
  }

  // --------------------------------------------------------------------
  //  Mass transfer out of aitken mode. Two coag pairs are involved:
  // - coag pair 1: aitken + accumulation -> accumulation
  // - coag pair 3: aitken + pca          -> pca
  // --------------------------------------------------------------------
  // Calculate the rate of mass transfer into different destination modes and
  // the sum over all modes

  const int nacc = static_cast<int>(ModeIndex::Accumulation);
  const int npca = static_cast<int>(ModeIndex::PrimaryCarbon);
  const int nait = static_cast<int>(ModeIndex::Aitken);

  const Real bijqnumj1 = haero::max(0.0, ybetaij3[0] * qnum_tavg[nacc]);
  const Real bijqnumj2 = haero::max(0.0, ybetaij3[2] * qnum_tavg[npca]);
  Real decay_const = bijqnumj1 + bijqnumj2;

  constexpr Real epsilonx2 = std::numeric_limits<Real>::epsilon() * 2.0;
  Real decay_factor =
      deltat * decay_const; // calculate coag-induced changes only when this
                            // number is not ~= zero

  if (decay_factor > epsilonx2) {

    // Portions of mass going into different modes
    const Real prtn2 = bijqnumj2 / decay_const;
    const Real prtn1 = 1.0 - prtn2;
    const Real tmp_xf =
        1.0 - haero::exp(-decay_factor); // total fraction lost from aitken mode
    for (int iaer = 0; iaer < num_aer; ++iaer) {
      const Real tmp_dq =
          tmp_xf * qaer_bgn[iaer][nait]; // total amount lost from aitken mode
      qaer_end[iaer][nait] -= tmp_dq;    // subtract from aitken mode
      qaer_end[iaer][nacc] +=
          tmp_dq * prtn1; // add a portion to accumulation mode
      qaer_end[iaer][npca] += tmp_dq * prtn2; // add a portion to pca mode

      // prtn2 (pair 3) corresponds to mass transfer to pca mode, which will
      // lead to aging. Add this amount to the total mass gained by pca mode, to
      // be used in the aging parameterization.
      qaer_del_coag_out[iaer][Coagulation::i_agepair_pca] += tmp_dq * prtn2;
    }
  }

  // --------------------------------------------------------------------
  //  Mass transfer out of pcarbon mode. Only one coag pair is involved:
  // - coag pair 2: pca + accumulation -> accumulation
  // --------------------------------------------------------------------
  decay_const = haero::max(
      0.0, ybetaij3[1] * qnum_tavg[nacc]); // there is only 1 destination

  decay_factor = deltat * decay_const; // calculate coag-induced changes only
                                       // when this number is not ~= zero
  if (decay_factor > epsilonx2) {
    const Real tmp_xf =
        1.0 - haero::exp(-decay_factor); // total fraction lost from pca mode
    for (int iaer = 0; iaer < num_aer; ++iaer) {
      const Real tmp_dq =
          tmp_xf * qaer_bgn[iaer][npca]; // total amount lost from pca mode
      qaer_end[iaer][npca] -= tmp_dq;    //  subtract from pca mode
      qaer_end[iaer][nacc] += tmp_dq;    // add to accumulaiton mode
    }
  }
}

// --------------------------------------------------------------------
// Purpose: update the number mixing ratio of a single mode considering both the
// intramodal
//         and intermodal coagulation
// --------------------------------------------------------------------
KOKKOS_INLINE_FUNCTION
void update_qnum_for_intra_and_intermodal_coag(const Real bijdtqnumj,
                                               const Real biidt,
                                               const Real qnumi_bgn,
                                               Real &qnumi_end) {

  const Real eps_denominator = 1.0e-5;
  if (bijdtqnumj < eps_denominator) {
    qnumi_end = qnumi_bgn / (1.0 + (bijdtqnumj + biidt * qnumi_bgn) *
                                       (1.0 + 0.5 * bijdtqnumj));
  } else {
    const Real tmp_exp = haero::exp(-bijdtqnumj);
    qnumi_end = qnumi_bgn * tmp_exp /
                (1.0 + (biidt * qnumi_bgn / bijdtqnumj) * (1.0 - tmp_exp));
  }
}

// ------------------------------------------------------------------------------------------------
// Purpose: update the number mixing ratio of a single mode by considering
// intramodal coagulation
// -------------------------------------------------------------------------------------------------
KOKKOS_INLINE_FUNCTION
void update_qnum_for_intramodal_coag(const Real ybetajj0, const Real deltat,
                                     const Real qnum_bgn, Real &qnum_end) {
  // Analytical solution under the assumption that ybetajj0 is constant over
  // deltat
  qnum_end = qnum_bgn / (1.0 + ybetajj0 * deltat * qnum_bgn);
}

// ----------------------------------------------------------------------------------------------------
// Purpose: update aerosol number mixing ratios by taking into account both the
// intramodal and
//          intermodal coagulation.
//
// Numerical treatment:
//  - Note that the updates for different modes are calculated in a sequential
//  manner using a specific
//    ordering because
//    - accumulation number loss depends on accumulation number
//    - pcarbon number loss depends on pcarbon and accumulation number
//
//  - The average number mixing ratio over current timestep
//    of other modes are used to calculate the number loss of a mode.
// ----------------------------------------------------------------------------------------------------
KOKKOS_INLINE_FUNCTION
void mam_coag_num_update(Real ybetaij0[Coagulation::max_coagpair],
                         Real ybetaii0[Coagulation::max_coagpair],
                         Real ybetajj0[Coagulation::max_coagpair],
                         const Real deltat,
                         Real qnum_bgn[AeroConfig::num_modes()],
                         Real qnum_end[AeroConfig::num_modes()],
                         Real qnum_tavg[AeroConfig::num_modes()]) {

  const int nacc = static_cast<int>(ModeIndex::Accumulation);
  const int npca = static_cast<int>(ModeIndex::PrimaryCarbon);
  const int nait = static_cast<int>(ModeIndex::Aitken);

  // -------------------------------------------------------
  // accumulaiton mode number loss due to intramodal coag
  // -------------------------------------------------------

  update_qnum_for_intramodal_coag(ybetajj0[0], deltat, qnum_bgn[nacc],
                                  qnum_end[nacc]);
  qnum_tavg[nacc] = (qnum_bgn[nacc] + qnum_end[nacc]) * 0.5;

  // ----------------------------------------------------------------------------
  // pcarbon mode number loss - approximate analytical solution
  // using average number conc. for accumulaiton mode
  // ----------------------------------------------------------------------------
  Real bijdtqnumj = haero::max(0.0, deltat * ybetaij0[1] * qnum_tavg[nacc]);
  Real biidt = haero::max(0.0, deltat * ybetaii0[1]);

  update_qnum_for_intra_and_intermodal_coag(bijdtqnumj, biidt, qnum_bgn[npca],
                                            qnum_end[npca]);

  qnum_tavg[npca] = (qnum_bgn[npca] + qnum_end[npca]) * 0.5;

  // -----------------------------------------------------------------------------------------
  // aitken mode number loss - approximate analytical solution
  // using average number conc. for accumulaiton and pcarbon modes
  // -----------------------------------------------------------------------------------------

  Real bijqnumj = ybetaij0[0] * qnum_tavg[nacc];
  bijqnumj = bijqnumj + ybetaij0[2] * qnum_tavg[npca];
  bijdtqnumj = haero::max(0.0, deltat * bijqnumj);
  biidt = haero::max(0.0, deltat * ybetaii0[0]);

  update_qnum_for_intra_and_intermodal_coag(bijdtqnumj, biidt, qnum_bgn[nait],
                                            qnum_end[nait]);
  qnum_tavg[nait] = (qnum_bgn[nait] + qnum_end[nait]) * 0.5;
}

// -----------------------------------------------------------------------------------------
// Purpose:
// Considers the coagulation between aitken, pcarbon, and accumulation modes and
// updates aerosol mass and number mixing ratios.
//
// This function is called by MAM4's microphysics driver for clear-air
// conditions.
// -----------------------------------------------------------------------------------------
KOKKOS_INLINE_FUNCTION
void mam_coag_1subarea(
    const Real deltat, const Real temp, const Real pmid, const Real aircon,
    Real dgn_a[AeroConfig::num_modes()], Real dgn_awet[AeroConfig::num_modes()],
    Real wetdens[AeroConfig::num_modes()],
    Real qnum_cur[AeroConfig::num_modes()],
    Real qaer_cur[AeroConfig::num_aerosol_ids()][AeroConfig::num_modes()],
    Real qaer_del_coag_out[AeroConfig::num_aerosol_ids()]
                          [AeroConfig::max_agepair()]) {

  const int num_aer = AeroConfig::num_aerosol_ids();
  const int num_mode = AeroConfig::num_modes();
  const int nacc = static_cast<int>(ModeIndex::Accumulation);
  const int npca = static_cast<int>(ModeIndex::PrimaryCarbon);
  const int nait = static_cast<int>(ModeIndex::Aitken);

  // ----------------------------------------------------
  // Preparation
  //----------------------------------------------------
  // Clip negative values and set initial values before coag
  Real qaer_bgn[num_aer][num_mode];
  for (int ispec = 0; ispec < num_aer; ++ispec) {
    for (int imode = 0; imode < num_mode; ++imode) {
      qaer_cur[ispec][imode] = haero::max(0.0, qaer_cur[ispec][imode]);
      qaer_bgn[ispec][imode] = qaer_cur[ispec][imode];
    }
  }

  Real qnum_bgn[num_mode];
  for (int imode = 0; imode < num_mode; ++imode) {
    qnum_cur[imode] = haero::max(0.0, qnum_cur[imode]);
    qnum_bgn[imode] = qnum_cur[imode];
  }

  // --------------------------------------------------------------
  // Compute coagulation rates using the CMAQ models "fast" method
  // (based on E. Whitby's approximation approach)
  // Here subr. arguments are all in mks unit.
  // --------------------------------------------------------------
  const int src_mode_coagpair[3] = {nait, npca, nait};
  const int dest_mode_coagpair[3] = {nacc, nacc, npca};

  Real ybetaij0[Coagulation::max_coagpair];
  Real ybetaij3[Coagulation::max_coagpair];
  Real ybetaii0[Coagulation::max_coagpair];
  Real ybetajj0[Coagulation::max_coagpair];

  for (int ip = 0; ip < Coagulation::max_coagpair; ++ip) {

    const int src_mode = src_mode_coagpair[ip];
    const int dest_mode = dest_mode_coagpair[ip];

    // const Real sigma_aer_src  =
    const Real sigma_aer_src = mam4::modes(src_mode).mean_std_dev;
    const Real sigma_aer_dest = mam4::modes(dest_mode).mean_std_dev;

    getcoags_wrapper_f(temp, pmid, dgn_awet[src_mode], dgn_awet[dest_mode],
                       sigma_aer_src, sigma_aer_dest, haero::log(sigma_aer_src),
                       haero::log(sigma_aer_dest), wetdens[src_mode],
                       wetdens[dest_mode], ybetaij0[ip], ybetaij3[ip],
                       ybetaii0[ip], ybetajj0[ip]);
  }
  // Convert coag coefficients from (m3/s) to (kmol-air/s)
  for (int ip = 0; ip < Coagulation::max_coagpair; ++ip) {
    ybetaij0[ip] *= aircon;
    ybetaij3[ip] *= aircon;
    ybetaii0[ip] *= aircon;
    ybetajj0[ip] *= aircon;
  }

  //---------------------------------------------------------------------------------------
  // Advance solutions in time assuming the coag coefficients are fixed within
  // one timestep
  //---------------------------------------------------------------------------------------
  // First update number mixing ratios
  Real qnum_tavg[num_mode];
  mam_coag_num_update(ybetaij0, ybetaii0, ybetajj0, deltat, qnum_bgn, qnum_cur,
                      qnum_tavg);

  // Then calculate mass transfers between modes and update mass mixing ratios
  mam_coag_aer_update(ybetaij3, deltat, qnum_tavg, qaer_bgn, qaer_cur,
                      qaer_del_coag_out);
}
KOKKOS_INLINE_FUNCTION
void coagulation_rates_1box(const int k, const AeroConfig &aero_config,
                            const Real dt, const Atmosphere &atm,
                            const Prognostics &progs, const Diagnostics &diags,
                            const Tendencies &tends,
                            const Coagulation::Config &config) {

  const int num_aer = AeroConfig::num_aerosol_ids();
  const int num_mode = AeroConfig::num_modes();

  const Real temp = atm.temperature(k);
  const Real pmid = atm.pressure(k);
  const Real aircon = pmid / (mam4::Constants::r_gas * temp);

  Real wet_density[num_mode];
  Real dgn_a[num_mode];
  Real dgn_awet[num_mode];
  for (int imode = 0; imode < num_mode; ++imode) {
    wet_density[imode] = diags.wet_density[imode](k);
    dgn_a[imode] = diags.dry_geometric_mean_diameter_i[imode](k);
    dgn_awet[imode] = diags.wet_geometric_mean_diameter_i[imode](k);
  }

  // Get prognostic fields
  // Aerosol mass
  Real qaer_cur[num_aer][num_mode];
  for (int imode = 0; imode < num_mode; ++imode)
    for (int ispec = 0; ispec < num_aer; ++ispec)
      qaer_cur[ispec][imode] = progs.q_aero_i[imode][ispec](k);

  // Aerosol number
  Real qnum_cur[num_mode];
  for (int imode = 0; imode < num_mode; ++imode) {
    qnum_cur[imode] = progs.n_mode_i[imode](k);
  }

  Real qaer_del_coag_out[AeroConfig::num_aerosol_ids()]
                        [AeroConfig::max_agepair()];

  mam_coag_1subarea(dt, temp, pmid, aircon, dgn_a, dgn_awet, wet_density,
                    qnum_cur, qaer_cur, qaer_del_coag_out);

  // compute the tendencies
  for (int imode = 0; imode < num_mode; ++imode) {
    for (int ispec = 0; ispec < num_aer; ++ispec) {
      tends.q_aero_i[imode][ispec](k) +=
          (qaer_cur[ispec][imode] - progs.q_aero_i[imode][ispec](k)) / dt;
    }
  }

  for (int imode = 0; imode < num_mode; ++imode) {
    tends.n_mode_i[imode](k) +=
        (qnum_cur[imode] - progs.n_mode_i[imode](k)) / dt;
  }

  // Update the prognostics
  for (int imode = 0; imode < num_mode; ++imode) {
    for (int ispec = 0; ispec < num_aer; ++ispec) {
      progs.q_aero_i[imode][ispec](k) = qaer_cur[ispec][imode];
    }

    for (int imode = 0; imode < num_mode; ++imode) {
      progs.n_mode_i[imode](k) = qnum_cur[imode];
    }
  }
}

} // namespace coagulation

// init -- initializes the implementation with MAM4's configuration
inline void Coagulation::init(const AeroConfig &aero_config,
                              const Config &process_config) {
  // TODO
  config_ = process_config;
}

// compute_tendencies -- computes tendencies and updates diagnostics
// NOTE: that both diags and tends are const below--this means their views
// NOTE: are fixed, but the data in those views is allowed to vary.
KOKKOS_INLINE_FUNCTION
void Coagulation::compute_tendencies(const AeroConfig &config,
                                     const ThreadTeam &team, Real t, Real dt,
                                     const Atmosphere &atm, const Surface &sfc,
                                     const Prognostics &progs,
                                     const Diagnostics &diags,
                                     const Tendencies &tends) const {

  const int nk = atm.num_levels();
  Kokkos::parallel_for(
      Kokkos::TeamThreadRange(team, nk), KOKKOS_CLASS_LAMBDA(int k) {
        coagulation::coagulation_rates_1box(k, config, dt, atm, progs, diags,
                                            tends, config_);
      });
}
} // namespace mam4

#endif
