// mam4xx: Copyright (c) 2022,
// Battelle Memorial Institute and
// National Technology & Engineering Solutions of Sandia, LLC (NTESS)
// SPDX-License-Identifier: BSD-3-Clause

#include "mam4xx/aero_modes.hpp"
#include <mam4xx/mam4.hpp>

#include <ekat/ekat_type_traits.hpp>
#include <ekat/logging/ekat_logger.hpp>
#include <ekat/mpi/ekat_comm.hpp>

#include <catch2/catch.hpp>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <limits>
#include <memory>

using namespace haero;
using namespace mam4;
TEST_CASE("test_constructor", "mam4_gasaerexch_process") {
  mam4::AeroConfig mam4_config;
  mam4::GasAerExchProcess::ProcessConfig process_config;
  mam4::GasAerExchProcess process(mam4_config, process_config);
  REQUIRE(process.name() == "MAM4 gas/aersol exchange");
  REQUIRE(process.aero_config() == mam4_config);
}

TEST_CASE("test_compute_tendencies", "mam4_gasaerexch_process") {
  int nlev = 72;
  Real pblh = 1000;
  Atmosphere atm(nlev, pblh);
  mam4::Prognostics progs(nlev);
  mam4::Diagnostics diags(nlev);
  mam4::Tendencies tends(nlev);

  mam4::AeroConfig mam4_config;
  mam4::GasAerExchProcess::ProcessConfig process_config;
  mam4::GasAerExchProcess process(mam4_config, process_config);

  // Single-column dispatch.
  auto team_policy = ThreadTeamPolicy(1u, Kokkos::AUTO);
  Real t = 0.0, dt = 30.0;
  Kokkos::parallel_for(
      team_policy, KOKKOS_LAMBDA(const ThreadTeam &team) {
        process.compute_tendencies(team, t, dt, atm, progs, diags, tends);
      });
}

TEST_CASE("test_multicol_compute_tendencies", "mam4_gasaerexch_process") {
  // Now we process multiple columns within a single d—ñspatch (mc means
  // "multi-column").
  int ncol = 8;
  DeviceType::view_1d<Atmosphere> mc_atm("mc_progs", ncol);
  DeviceType::view_1d<mam4::Prognostics> mc_progs("mc_atm", ncol);
  DeviceType::view_1d<mam4::Diagnostics> mc_diags("mc_diags", ncol);
  DeviceType::view_1d<mam4::Tendencies> mc_tends("mc_tends", ncol);
  const int nlev = 72;
  const Real pblh = 1000;
  Atmosphere atmosphere(nlev, pblh);
  mam4::Prognostics prognostics(nlev);
  mam4::Diagnostics diagnostics(nlev);
  mam4::Tendencies tendencies(nlev);
  for (int icol = 0; icol < ncol; ++icol) {
    Kokkos::parallel_for(
        "Load multi-column views", 1, KOKKOS_LAMBDA(const int) {
          mc_atm(icol) = atmosphere;
          mc_progs(icol) = prognostics;
          mc_diags(icol) = diagnostics;
          mc_tends(icol) = tendencies;
        });
  }

  mam4::AeroConfig mam4_config;
  mam4::GasAerExchProcess::ProcessConfig process_config;
  mam4::GasAerExchProcess process(mam4_config, process_config);

  // Dispatch over all the above columns.
  auto team_policy = ThreadTeamPolicy(ncol, Kokkos::AUTO);
  Real t = 0.0, dt = 30.0;
  Kokkos::parallel_for(
      team_policy, KOKKOS_LAMBDA(const ThreadTeam &team) {
        const int icol = team.league_rank();
        process.compute_tendencies(team, t, dt, mc_atm(icol), mc_progs(icol),
                                   mc_diags(icol), mc_tends(icol));
      });
}

TEST_CASE("gas_aer_uptkrates_1box1gas", "mam_gasaerexch") {

  ekat::Comm comm;
  ekat::logger::Logger<> logger("nucleation unit tests",
                                ekat::logger::LogLevel::debug, comm);

  const int num_mode = mam4::GasAerExch::num_mode;
  // Values as used in mam_refactor smoke test:
  const bool l_condense_to_mode[num_mode] = {true, true, true, true};
  const Real temp = 273.00000000000000;
  const Real pmid = 100000.00000000000;
  const Real pstd = 101325.00000000000;
  const Real mw_h2so4 = 98.078400000000002;
  const Real mw_air = 28.966000000000001;
  const Real vol_molar_h2so4 = 42.880000000000003;
  const Real vol_molar_air = 20.100000000000001;
  const Real accom_coef_h2so4 = 0.65000000000000002;
  const Real r_universal = 8314.4675910000005;
  const Real r_pi = 3.1415926535897931;
  const Real beta_inp = 0.0000000000000000;
  const int ntot_amode = 4;

  // clang-format off
  const Real alnsg_aer[ntot_amode] = 
      {0.58778666490211906, 0.47000362924573563, 0.58778666490211906, 0.47000362924573563};

  const Real dgn_awet[4][10][ntot_amode] = {
      {{1.2730137346646958E-007, 2.9756030032807321E-008, 2.3266870254473761E-006, 5.2963711345420440E-008},
       {1.2705960055085835E-007, 2.7734941184652717E-008, 2.3266884562632178E-006, 5.2963714752164382E-008},
       {1.2683434225239912E-007, 2.6215113455705486E-008, 2.3266898858024220E-006, 5.2963718156609192E-008},
       {1.2661202400655583E-007, 2.5014309755008241E-008, 2.3266913140626734E-006, 5.2963721559294933E-008},
       {1.2639258815520725E-007, 2.4034073019665245E-008, 2.3266927410421792E-006, 5.2963724960215609E-008},
       {1.2617597858658348E-007, 2.3214181904901140E-008, 2.3266941667395634E-006, 5.2963728359365464E-008},
       {1.2596214066904354E-007, 2.2515366655191507E-008, 2.3266955911537830E-006, 5.2963731756739064E-008},
       {1.2575102119539438E-007, 2.1910734015633354E-008, 2.3266970142840733E-006, 5.2963735121543830E-008},
       {1.2554256709308087E-007, 2.1381138917843580E-008, 2.3266984361299039E-006, 5.2963738484405470E-008},
       {1.2533672910075211E-007, 2.0912516507927464E-008, 2.3266998566909396E-006, 5.2963741845320131E-008}},
      {{1.2730137346646958E-007, 2.9756030032807321E-008, 2.3266870254473761E-006, 5.2963711345420440E-008},
       {1.2705964266626952E-007, 2.7735043909368240E-008, 2.3266884557869371E-006, 5.2963714752164521E-008},
       {1.2683442323650296E-007, 2.6215272038782050E-008, 2.3266898848497344E-006, 5.2963718156610165E-008},
       {1.2661214356563382E-007, 2.5014501118744770E-008, 2.3266913126334548E-006, 5.2963721559297269E-008},
       {1.2639274600174366E-007, 2.4034284236478056E-008, 2.3266927391363055E-006, 5.2963724960219851E-008},
       {1.2617617443909150E-007, 2.3214405212758135E-008, 2.3266941643569123E-006, 5.2963728359372193E-008},
       {1.2596237425189373E-007, 2.2515597149582275E-008, 2.3266955882942353E-006, 5.2963731756748838E-008},
       {1.2575129223864677E-007, 2.1910968475886281E-008, 2.3266970109475110E-006, 5.2963735121557283E-008},
       {1.2554287533234177E-007, 2.1381375165779222E-008, 2.3266984323162096E-006, 5.2963738484423158E-008},
       {1.2533707427697272E-007, 2.0912753036852346E-008, 2.3266998523999965E-006, 5.2963741845342670E-008}},
      {{1.2730137346646958E-007, 2.9756030032807321E-008, 2.3266870254473761E-006, 5.2963711345420440E-008},
       {1.2705964379956080E-007, 2.7735045293819279E-008, 2.3266884557832063E-006, 5.2963714752164567E-008},
       {1.2683442548843725E-007, 2.6215274212524796E-008, 2.3266898848422703E-006, 5.2963718156610237E-008},
       {1.2661214691663150E-007, 2.5014503775927883E-008, 2.3266913126222502E-006, 5.2963721559297401E-008},
       {1.2639275043273339E-007, 2.4034287204296880E-008, 2.3266927391213592E-006, 5.2963724960220023E-008},
       {1.2617617993149245E-007, 2.3214408386476093E-008, 2.3266941643382195E-006, 5.2963728359372432E-008},
       {1.2596238078759956E-007, 2.2515600462319277E-008, 2.3266955882717923E-006, 5.2963731756749168E-008},
       {1.2575129980000943E-007, 2.1910971883193896E-008, 2.3266970109213140E-006, 5.2963735121557700E-008},
       {1.2554288390215642E-007, 2.1381378637178456E-008, 2.3266984322862547E-006, 5.2963738484423707E-008},
       {1.2533708383846303E-007, 2.0912756550918780E-008, 2.3266998523662808E-006, 5.2963741845343345E-008}},
      {{1.2730137346646958E-007, 2.9756030032807321E-008, 2.3266870254473761E-006, 5.2963711345420440E-008},
       {1.2705964379954029E-007, 2.7735045293712044E-008, 2.3266884557832063E-006, 5.2963714752164548E-008},
       {1.2683442548839567E-007, 2.6215274212355224E-008, 2.3266898848422703E-006, 5.2963718156610237E-008},
       {1.2661214691656821E-007, 2.5014503775719026E-008, 2.3266913126222502E-006, 5.2963721559297394E-008},
       {1.2639275043264773E-007, 2.4034287204061842E-008, 2.3266927391213592E-006, 5.2963724960220029E-008},
       {1.2617617993138392E-007, 2.3214408386222847E-008, 2.3266941643382195E-006, 5.2963728359372432E-008},
       {1.2596238078746750E-007, 2.2515600462052948E-008, 2.3266955882717919E-006, 5.2963731756749168E-008},
       {1.2575129979985321E-007, 2.1910971882917916E-008, 2.3266970109213140E-006, 5.2963735121557700E-008},
       {1.2554288390197563E-007, 2.1381378636895206E-008, 2.3266984322862551E-006, 5.2963738484423707E-008},
       {1.2533708383825701E-007, 2.0912756550629949E-008, 2.3266998523662808E-006, 5.2963741845343345E-008}}};

  const Real uptkaer[4][10][ntot_amode] = {
      {{2.9038521426180718E-012, 1.6269993043754283E-013, 1.5631613413180183E-010, 4.9278821713986784E-013},
       {2.8944999596642482E-012, 1.4187477231318753E-013, 1.5631624126838734E-010, 4.9278827717568128E-013},
       {2.8857956986178059E-012, 1.2710251871143823E-013, 1.5631634830938248E-010, 4.9278833717098347E-013},
       {2.8772136744344562E-012, 1.1597578167919939E-013, 1.5631645525461391E-010, 4.9278839713528901E-013},
       {2.8687513379702286E-012, 1.0725218846653748E-013, 1.5631656210394703E-010, 4.9278845706849348E-013},
       {2.8604062117855080E-012, 1.0020528209453620E-013, 1.5631666885727913E-010, 4.9278851697049057E-013},
       {2.8521758870874563E-012, 9.4379531732108990E-014, 1.5631677551453202E-010, 4.9278857684119393E-013},
       {2.8440580211049656E-012, 8.9473604780915010E-014, 1.5631688207564844E-010, 4.9278863613794845E-013},
       {2.8360502871014003E-012, 8.5279560149796880E-014, 1.5631698854058830E-010, 4.9278869540046031E-013},
       {2.8281505151907128E-012, 8.1648891055845788E-014, 1.5631709490932707E-010, 4.9278875462867072E-013}},
      {{2.9128703001827912E-012, 1.6266455351832048E-013, 1.5626420365850126E-010, 4.9276409812923992E-013},
       {2.9034788809442098E-012, 1.4184502405877608E-013, 1.5626431069489208E-010, 4.9276415818315299E-013},
       {2.8947380833812152E-012, 1.2707674738005141E-013, 1.5626441763574041E-010, 4.9276421819655288E-013},
       {2.8861200403372718E-012, 1.1595298120653927E-013, 1.5626452448087350E-010, 4.9276427817896037E-013},
       {2.8776221921594257E-012, 1.0723169070790717E-013, 1.5626463123015745E-010, 4.9276433813026053E-013},
       {2.8692420511831481E-012, 1.0018662031109461E-013, 1.5626473788348824E-010, 4.9276439805035905E-013},
       {2.8609771986627311E-012, 9.4362366889914131E-014, 1.5626484444078921E-010, 4.9276445793916134E-013},
       {2.8528252821361305E-012, 8.9457682813689430E-014, 1.5626495090200286E-010, 4.9276451725385372E-013},
       {2.8447839652211352E-012, 8.5264685750741812E-014, 1.5626505726708920E-010, 4.9276457653430798E-013},
       {2.8368510690461763E-012, 8.1634910864512377E-014, 1.5626516353602392E-010, 4.9276463578045232E-013}},
      {{2.9129863746100918E-012, 1.6266462104967310E-013, 1.5626379745460215E-010, 4.9276246400203753E-013},
       {2.9035940123730306E-012, 1.4184511857289048E-013, 1.5626390449195571E-010, 4.9276252405545764E-013},
       {2.8948523401612873E-012, 1.2707685100491004E-013, 1.5626401143376520E-010, 4.9276258406836812E-013},
       {2.8862334351298390E-012, 1.1595308656787399E-013, 1.5626411827985784E-010, 4.9276264405028133E-013},
       {2.8777347373742471E-012, 1.0723179458012881E-013, 1.5626422503009954E-010, 4.9276270400108914E-013},
       {2.8693537589847625E-012, 1.0018672128803179E-013, 1.5626433168438785E-010, 4.9276276392070087E-013},
       {2.8610880809765524E-012, 9.4362464416386521E-014, 1.5626443824264395E-010, 4.9276282380900959E-013},
       {2.8529353506542961E-012, 8.9457776747293856E-014, 1.5626454470481162E-010, 4.9276288312321993E-013},
       {2.8448932314031852E-012, 8.5264776151085966E-014, 1.5626465107085124E-010, 4.9276294240318789E-013},
       {2.8369595441345913E-012, 8.1634997887365087E-014, 1.5626475734073695E-010, 4.9276300164884907E-013}},
      {{2.9129863658489397E-012, 1.6266462105049064E-013, 1.5626379745183893E-010, 4.9276246398859393E-013},
       {2.9035940034729279E-012, 1.4184511857267869E-013, 1.5626390448919259E-010, 4.9276252404201394E-013},
       {2.8948523311334433E-012, 1.2707685100406685E-013, 1.5626401143100223E-010, 4.9276258405492471E-013},
       {2.8862334259776098E-012, 1.1595308656662280E-013, 1.5626411827709501E-010, 4.9276264403683611E-013},
       {2.8777347281008614E-012, 1.0723179457860679E-013, 1.5626422502733681E-010, 4.9276270398764564E-013},
       {2.8693537495933998E-012, 1.0018672128632805E-013, 1.5626433168162524E-010, 4.9276276390725727E-013},
       {2.8610880714702866E-012, 9.4362464414557651E-014, 1.5626443823988145E-010, 4.9276282379556609E-013},
       {2.8529353410361090E-012, 8.9457776745379852E-014, 1.5626454470204925E-010, 4.9276288310977653E-013},
       {2.8448932216760133E-012, 8.5264776149112993E-014, 1.5626465106808890E-010, 4.9276294238974439E-013},
       {2.8369595343012467E-012, 8.1634997885352709E-014, 1.5626475733797482E-010, 4.9276300163540537E-013}}};
  // clang-format on

  for (int p = 0; p < 4; ++p) {
    // Test all integration rules
    const int nghqs[4] = {2, 4, 10, 20};
    const int nghq = nghqs[p];
    for (int n = 0; n < 10; ++n) {
      // Test 10 cases
      Real uptkaer_ref[ntot_amode] = {0.0000000000000000, 0.0000000000000000,
                                      0.0000000000000000, 0.0000000000000000};

      gasaerexch::gas_aer_uptkrates_1box1gas(
          l_condense_to_mode, temp, pmid, pstd, mw_h2so4, mw_air,
          vol_molar_h2so4, vol_molar_air, accom_coef_h2so4, r_universal, r_pi,
          beta_inp, nghq, dgn_awet[p][n], alnsg_aer, uptkaer_ref);

      for (int i = 0; i < ntot_amode; ++i) {
        if (!(uptkaer_ref[i] == Approx(uptkaer[p][n][i])))
          std::cout << "uptkaer_ref[i] != Approx(uptkaer[p][n][i])): "
                    << std::setprecision(14) << uptkaer_ref[i]
                    << " != " << uptkaer[p][n][i] << " (p,n,i):(" << p << ","
                    << n << "," << i << ")" << std::endl;
        REQUIRE(uptkaer_ref[i] == Approx(uptkaer[p][n][i]));
      }
    }
  }
}

TEST_CASE("mam_gasaerexch_1subarea_1gas_nonvolatile", "mam_gasaerexch") {

  // Since there does not seem to be a way to extract the internal epsilon
  // used by Approx from the class, the following is based on code found
  // in the catch_approx.cpp source file.
  const double epsilon = ekat::is_single_precision<Real>::value
                             // Single precision value since the check values
                             // were created using double
                             ? .0001
                             // Default value used in class Approx
                             : std::numeric_limits<float>::epsilon() * 100;

  ekat::Comm comm;
  ekat::logger::Logger<> logger("nucleation unit tests",
                                ekat::logger::LogLevel::debug, comm);

  const int num_mode = mam4::GasAerExch::num_mode;
  // Values as used in mam_refactor smoke test:

  const Real dts[3] = {1.0, 1.0e-20, 10.0};
  const Real qgas_netprod_otrproc = 5.00000000E-016;
  // clang-format off
  const Real uptkaer[3][10][num_mode] = {
      {{2.8825214836391422E-004, 1.6150479495487672E-004, 1.5516789173297778E-005, 9.7833674238607867E-005},
       {2.8913181177882068E-004, 1.7561477711278560E-004, 1.5516799808257626E-005, 9.7543918825297989E-005},
       {2.8995097552900125E-004, 1.8827585007002664E-004, 1.5516810433728653E-005, 9.7255542855016150E-005},
       {2.9076430264442552E-004, 1.9983549493319009E-004, 1.5516821049693655E-005, 9.6968537558659326E-005},
       {2.9157186993739688E-004, 2.1055830303835061E-004, 1.5516831656139272E-005, 9.6682894223796390E-005},
       {2.9237375274054260E-004, 2.2062176911155144E-004, 1.5516842253055303E-005, 9.6398604189172510E-005},
       {2.9317002495562544E-004, 2.3015115566096369E-004, 1.5516852840433991E-005, 9.6115658834033686E-005},
       {2.9396075908880262E-004, 2.3923836936107343E-004, 1.5516863418269646E-005, 9.5834049715385553E-005},
       {2.9474603063904981E-004, 2.4795295093232958E-004, 1.5516873986558298E-005, 9.5553766529866868E-005},
       {2.9552590525020128E-004, 2.5634885743190211E-004, 1.5516884545297504E-005, 9.5274802336758267E-005}},
      {{2.8825214836391422E-004, 1.6150479495487672E-004, 1.5516789173297778E-005, 9.7833674238607867E-005},
       {2.8890459238538460E-004, 1.7560634088654813E-004, 1.5516798632034082E-005, 9.7624646704106484E-005},
       {2.8950525373480109E-004, 1.8825095185645829E-004, 1.5516808088067353E-005, 9.7416122925779395E-005},
       {2.9010346874411020E-004, 1.9979314881714397E-004, 1.5516817541343080E-005, 9.7208102554154305E-005},
       {2.9069925485252976E-004, 2.1049749594694765E-004, 1.5516826991810652E-005, 9.7000585233351458E-005},
       {2.9129262933054939E-004, 2.2054153351763856E-004, 1.5516836439422636E-005, 9.6793570591100376E-005},
       {2.9188360929509333E-004, 2.3005060013274006E-004, 1.5516845884134081E-005, 9.6587058226920778E-005},
       {2.9247221171956977E-004, 2.3911669065468282E-004, 1.5516855325902192E-005, 9.6381047709155485E-005},
       {2.9305845780266997E-004, 2.4780943745878977E-004, 1.5516864764685890E-005, 9.6175536950290037E-005},
       {2.9364236001415585E-004, 2.5618288860993974E-004, 1.5516874200445654E-005, 9.5970527021146522E-005}},
      {{2.8825214836391422E-004, 1.6150479495487672E-004, 1.5516789173297778E-005, 9.7833674238607867E-005},
       {2.9116278226243395E-004, 1.7569034260608683E-004, 1.5516810365887290E-005, 9.6819315386397468E-005},
       {2.9389725469814988E-004, 1.8849827927330221E-004, 1.5516831453473513E-005, 9.5822476431747615E-005},
       {2.9656061262933964E-004, 2.0021260416943861E-004, 1.5516852435974999E-005, 9.4842834161189502E-005},
       {2.9915582261753838E-004, 2.1109790586903529E-004, 1.5516873313408740E-005, 9.3880065784608937E-005},
       {3.0168567232697940E-004, 2.2133105228309445E-004, 1.5516894085868569E-005, 9.2933850899594274E-005},
       {3.0415278387347158E-004, 2.3103642700450936E-004, 1.5516914753510029E-005, 9.2003872346993856E-005},
       {3.0655962636241189E-004, 2.4030496709980811E-004, 1.5516935316540132E-005, 9.1089816885070487E-005},
       {3.0890853150773560E-004, 2.4920522747950768E-004, 1.5516955775209287E-005, 9.0191374070883621E-005},
       {3.1120169225663243E-004, 2.5779019803550567E-004, 1.5516976129805324E-005, 8.9308241299504377E-005}}};

  const Real in_qaer_cur[3][10][num_mode] = {
      {{3.4543891238118817E-011, 2.6039003387624214E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4550145466431223E-011, 2.7085381034471938E-012, 1.3841797477113269E-010, 0.0000000000000000},
       {3.4554573528111080E-011, 2.8143998693114451E-012, 1.3841815241630738E-010, 0.0000000000000000},
       {3.4558982187451026E-011, 2.9196746222338241E-012, 1.3841832903692752E-010, 0.0000000000000000},
       {3.4563371464457567E-011, 3.0243599959047575E-012, 1.3841850463875586E-010, 0.0000000000000000},
       {3.4567741385312547E-011, 3.1284548767492370E-012, 1.3841867922755203E-010, 0.0000000000000000},
       {3.4572091978034984E-011, 3.2319590017286081E-012, 1.3841885280906893E-010, 0.0000000000000000},
       {3.4576423272432240E-011, 3.3348727122992813E-012, 1.3841902538904974E-010, 0.0000000000000000},
       {3.4580735316449740E-011, 3.4371967794683046E-012, 1.3841919697322532E-010, 0.0000000000000000},
       {3.4585028127638834E-011, 3.5389323450407532E-012, 1.3841936756731221E-010, 0.0000000000000000}},
      {{3.4543891238118817E-011, 2.6039003387624214E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545523799680896E-011, 2.7068834670370362E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545524974978544E-011, 2.8108004926354357E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545526239890154E-011, 2.9140350335264169E-012, 1.3841779609564254E-010, 0.0000000000000000},
       {3.4545527590932610E-011, 3.0165991273645691E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545529028638121E-011, 3.1185027921817353E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545530553363484E-011, 3.2197546827103235E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545532165360273E-011, 3.3203624823305110E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545533881244394E-011, 3.4203331375492286E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545535685489576E-011, 3.5196730751680504E-012, 1.3841779609564252E-010, 0.0000000000000000}},
      {{3.4543891238118817E-011, 2.6039003387624214E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4591644767609546E-011, 2.7233739106876547E-012, 1.3841957854019800E-010, 0.0000000000000000},
       {3.4635825790576510E-011, 2.8466406108906802E-012, 1.3842134545161804E-010, 0.0000000000000000},
       {3.4679814510300586E-011, 2.9701257437833903E-012, 1.3842309682673812E-010, 0.0000000000000000},
       {3.4723601695290640E-011, 3.0936906910013100E-012, 1.3842483267672178E-010, 0.0000000000000000},
       {3.4767178859352076E-011, 3.2172283346673429E-012, 1.3842655302389037E-010, 0.0000000000000000},
       {3.4810538176560682E-011, 3.3406528763779508E-012, 1.3842825789955799E-010, 0.0000000000000000},
       {3.4853672417570752E-011, 3.4638937045740747E-012, 1.3842994734248866E-010, 0.0000000000000000},
       {3.4896574913559294E-011, 3.5868914457980456E-012, 1.3843162139774970E-010, 0.0000000000000000},
       {3.4939239464266833E-011, 3.7095953649427108E-012, 1.3843328011583073E-010, 0.0000000000000000}}};

  const Real out_qaer_cur[3][10][num_mode] = {
      {{3.4549423266828319E-011, 2.6069998791040425E-012, 1.3841809388812617E-010, 1.8775877221248125E-015},
       {3.4555662376258777E-011, 2.7118890003400572E-012, 1.3841827084642385E-010, 1.8612306998486968E-015},
       {3.4560074156105117E-011, 2.8179716297085476E-012, 1.3841844678400762E-010, 1.8450241825440182E-015},
       {3.4564466423235679E-011, 2.9234438090369814E-012, 1.3841862170664142E-010, 1.8289670321569599E-015},
       {3.4568839202426779E-011, 3.0283085168251816E-012, 1.3841879562008280E-010, 1.8130580698129665E-015},
       {3.4573192524433275E-011, 3.1325682417322939E-012, 1.3841896853008018E-010, 1.7972960895205187E-015},
       {3.4577526421668389E-011, 3.2362252751403981E-012, 1.3841914044237027E-010, 1.7816798640992575E-015},
       {3.4581840928172393E-011, 3.3392818420384053E-012, 1.3841931136267571E-010, 1.7662081536054488E-015},
       {3.4586136096057272E-011, 3.4417401459663029E-012, 1.3841948129670346E-010, 1.7508796728450361E-015},
       {3.4590411946750202E-011, 3.5436024462173347E-012, 1.3841965025014331E-010, 1.7356931914926501E-015}},
      {{3.4543891238118817E-011, 2.6039003387624214E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545523799680896E-011, 2.7068834670370362E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545524974978544E-011, 2.8108004926354357E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545526239890154E-011, 2.9140350335264169E-012, 1.3841779609564254E-010, 0.0000000000000000},
       {3.4545527590932610E-011, 3.0165991273645691E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545529028638121E-011, 3.1185027921817353E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545530553363484E-011, 3.2197546827103235E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545532165360273E-011, 3.3203624823305110E-012, 1.3841779609564252E-010, 0.0000000000000000},
       {3.4545533881244394E-011, 3.4203331375492286E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {3.4545535685489576E-011, 3.5196730751680504E-012, 1.3841779609564252E-010, 0.0000000000000000}},
      {{3.4599078071202227E-011, 2.6348209692310381E-012, 1.3842076683656830E-010, 1.8730582515300600E-014},
       {3.4646902993251958E-011, 2.7567172402144687E-012, 1.3842252339256473E-010, 1.8374819523957843E-014},
       {3.4691112457969225E-011, 2.8821000835590644E-012, 1.3842426441015149E-010, 1.8025705577513406E-014},
       {3.4735107589949117E-011, 3.0074549473172955E-012, 1.3842598991004419E-010, 1.7683239648285265E-014},
       {3.4778880429824748E-011, 3.1326978712632150E-012, 1.3842769992200281E-010, 1.7347385015423203E-014},
       {3.4822423652455173E-011, 3.2577585597070562E-012, 1.3842939448333645E-010, 1.7018081520481834E-014},
       {3.4865730502560982E-011, 3.3825773251197445E-012, 1.3843107363777577E-010, 1.6695253126394671E-014},
       {3.4908794745193754E-011, 3.5071028162339715E-012, 1.3843273743459038E-010, 1.6378812790964114E-014},
       {3.4951610640714727E-011, 3.6312903195951770E-012, 1.3843438592788476E-010, 1.6068665474893838E-014},
       {3.4994172858562415E-011, 3.7551005499933817E-012, 1.3843601917602618E-010, 1.5764711295672193E-014}}};

  const Real out_qgas_avg[3][10] = {
      {1.9191631470368576E-011, 1.9080951697012725E-011, 1.8970890869739010E-011, 1.8861449178322882E-011,
       1.8752626288706048E-011, 1.8644421479455502E-011, 1.8536833700859000E-011, 1.8429861632514369E-011,
       1.8323503731934381E-011, 1.8217758273907820E-011},
      {1.9196785428799816E-011, 1.9092369738963115E-011, 1.8988651538067063E-011, 1.8885615732264482E-011,
       1.8783250287383871E-011, 1.8681545184861183E-011, 1.8580491769607234E-011, 1.8480082357990262E-011,
       1.8380309986887433E-011, 1.8281168245023424E-011},
      {1.9145332791670708E-011, 1.8978464628287798E-011, 1.8811563057810087E-011, 1.8644781975021802E-011,
       1.8478241222395088E-011, 1.8312037385460390E-011, 1.8146250478923765E-011, 1.7980948201519970E-011,
       1.7816188787926866E-011, 1.7652023000658613E-011}};

  const Real in_qgas_cur[3][10] = {
      {1.9196785428799816E-011, 1.9086214760312434E-011, 1.8976247287593632E-011, 1.8866887254711152E-011,
       1.8758137002205340E-011, 1.8649997611709737E-011, 1.8542469312491037E-011, 1.8435551727542304E-011,
       1.8329244032180201E-011, 1.8223545061331766E-011},
      {1.9196785428799816E-011, 1.9092369738963115E-011, 1.8988651538067063E-011, 1.8885615732264482E-011,
       1.8783250287383871E-011, 1.8681545184861183E-011, 1.8580491769607234E-011, 1.8480082357990262E-011,
       1.8380309986887433E-011, 1.8281168245023424E-011},
      {1.9196785428799816E-011, 1.9030975882828376E-011, 1.8864961248238360E-011, 1.8698936020501514E-011,
       1.8533048038309896E-011, 1.8367412883413813E-011, 1.8202124148826970E-011, 1.8037259636690117E-011,
       1.7872885344216572E-011, 1.7709058156283342E-011}};

  const Real out_qgas_cur[3][10] = {
      {1.9186478479542893E-011, 1.9075689647601013E-011, 1.8965535507319710E-011, 1.8856012195377293E-011,
       1.8747116703918971E-011, 1.8638846508988273E-011, 1.8531199282280415E-011, 1.8424172760283460E-011,
       1.8317764682923683E-011, 1.8211972765021210E-011},
      {1.9196785428799816E-011, 1.9092369738963115E-011, 1.8988651538067063E-011, 1.8885615732264482E-011,
       1.8783250287383871E-011, 1.8681545184861183E-011, 1.8580491769607234E-011, 1.8480082357990262E-011,
       1.8380309986887433E-011, 1.8281168245023424E-011},
      {1.9093976641806687E-011, 1.8926054655768472E-011, 1.8758270444066314E-011, 1.8590737414364731E-011,
       1.8423547493217444E-011, 1.8256778324304468E-011, 1.8090496382740719E-011, 1.7924759292514538E-011,
       1.7759617547654076E-011, 1.7595115805445990E-011}};
  // clang-format on

  for (int p = 0; p < 3; ++p) {
    const Real dt = dts[p];
    for (int n = 0; n < 10; ++n) {
      Real qaer_cur[num_mode];
      Real qgas_cur = in_qgas_cur[p][n];
      Real qgas_avg = 0;
      for (int j = 0; j < num_mode; j++)
        qaer_cur[j] = in_qaer_cur[p][n][j];
      gasaerexch::mam_gasaerexch_1subarea_1gas_nonvolatile(
          dt, qgas_netprod_otrproc, uptkaer[p][n], qgas_cur, qgas_avg,
          qaer_cur);

      if (!(qgas_cur == Approx(out_qgas_cur[p][n]).epsilon(epsilon)))
        std::cout << "qgas_cur != Approx(test_qgas_cur)): "
                  << std::setprecision(14) << qgas_cur
                  << " != " << out_qgas_cur[p][n] << std::endl;
      REQUIRE(qgas_cur == Approx(out_qgas_cur[p][n]).epsilon(epsilon));

      if (!(qgas_avg == Approx(out_qgas_avg[p][n]).epsilon(epsilon)))
        std::cout << "qgas_avg != Approx(test_qgas_avg)): "
                  << std::setprecision(14) << qgas_avg
                  << " != " << out_qgas_avg[p][n] << std::endl;
      REQUIRE(qgas_avg == Approx(out_qgas_avg[p][n]).epsilon(epsilon));

      for (int i = 0; i < num_mode; ++i) {
        if (!(qaer_cur[i] == Approx(out_qaer_cur[p][n][i]).epsilon(epsilon)))
          std::cout << "qaer_cur[i] != Approx(test_qaer_cur[i])): "
                    << std::setprecision(14) << qaer_cur[i]
                    << " != " << out_qaer_cur[p][n][i] << " (n,i):(" << n << ","
                    << i << ")" << std::endl;
        REQUIRE(qaer_cur[i] == Approx(out_qaer_cur[p][n][i]).epsilon(epsilon));
      }
    }
  }
}

namespace {
void GasAerExch_init(const GasAerExch::Config &config,
                     int eqn_and_numerics_category[mam4::GasAerExch::num_gas],
                     bool l_gas_condense_to_mode[mam4::GasAerExch::num_gas]
                                                [mam4::GasAerExch::num_mode]) {
  const int num_gas = AeroConfig::num_gas_ids();
  const int igas_h2so4 = static_cast<int>(GasId::H2SO4);
  const int igas_soag = static_cast<int>(GasId::SOAG);
  const int igas_nh3 = static_cast<int>(GasId::NH3);
  const int num_mode = GasAerExch::num_mode;

  for (int k = 0; k < num_gas; ++k)
    eqn_and_numerics_category[k] = mam4::GasAerExch::NA;
  eqn_and_numerics_category[igas_soag] = mam4::GasAerExch::IMPL;
  eqn_and_numerics_category[igas_h2so4] = mam4::GasAerExch::ANAL;
  eqn_and_numerics_category[igas_nh3] = mam4::GasAerExch::ANAL;

  for (int igas = 0; igas < num_gas; ++igas)
    for (int imode = 0; imode < num_mode; ++imode)
      l_gas_condense_to_mode[igas][imode] = false;

  // loop through all registered gas species
  for (int igas = 0; igas < num_gas; ++igas) {
    const AeroId aero_id = GasAerExch::gas_to_aer(static_cast<GasId>(igas));
    // can this gas species condense?
    if (eqn_and_numerics_category[igas] != mam4::GasAerExch::NA) {
      // what aerosol species does the gas become when condensing?
      if (aero_id != AeroId::None) {
        for (int imode = 0; imode < num_mode; ++imode) {
          const ModeIndex node_index = static_cast<ModeIndex>(imode);
          const bool mode_contains_species =
              -1 != aerosol_index_for_mode(node_index, aero_id);
          l_gas_condense_to_mode[igas][imode] =
              mode_contains_species || config.l_mode_can_age[imode];
        }
      }
    }
  }
}
} // namespace
TEST_CASE("mam_gasaerexch_1subarea", "mam_gasaerexch") {

  // Since there does not seem to be a way to extract the internal epsilon
  // used by Approx from the class, the following is based on code found
  // in the catch_approx.cpp source file.
  const double epsilon = ekat::is_single_precision<Real>::value
                             // Single precision value since the check values
                             // were created using double
                             ? .0001
                             // Default value used in class Approx
                             : std::numeric_limits<float>::epsilon() * 100;

  ekat::Comm comm;
  ekat::logger::Logger<> logger("nucleation unit tests",
                                ekat::logger::LogLevel::debug, comm);

  const int num_mode = mam4::GasAerExch::num_mode;
  const int num_gas = mam4::GasAerExch::num_gas;
  const int num_aer = AeroConfig::num_aerosol_ids();

  const GasAerExch::Config config;
  // Values as used in mam_refactor smoke test:
  const int nghq = 2;
  const int igas_h2so4 = static_cast<int>(GasId::H2SO4);
  const int igas_soag = static_cast<int>(GasId::SOAG);
  const bool igas_nh3 = false;
  const int iaer_so4 = static_cast<int>(AeroId::SO4);
  const int iaer_pom = static_cast<int>(AeroId::POM);
  const bool l_calc_gas_uptake_coeff = config.calculate_gas_uptake_coefficient;

  int eqn_and_numerics_category[num_gas];
  bool l_gas_condense_to_mode[num_gas][num_mode];
  GasAerExch_init(config, eqn_and_numerics_category, l_gas_condense_to_mode);

  const Real dt = 1.0;
  const Real dtsub_soa_fixed = -1.0;
  const Real temp = 273.0;
  const Real pmid = 100000.0;
  const Real aircon = 4.4055781358372036e-02;
  const int ngas = GasAerExch::num_gas_to_aer;
  const Real qgas_netprod_otrproc[num_gas] = {0.0, 5.00e-16, 0.0};

  Real modes_mean_std_dev[num_mode];
  for (int imode = 0; imode < num_mode; ++imode)
    modes_mean_std_dev[imode] = modes(imode).mean_std_dev;
  Real alnsg_aer[num_mode];
  for (int k = 0; k < num_mode; ++k)
    alnsg_aer[k] = std::log(modes_mean_std_dev[k]);

  Real uptkrate_h2so4 = 0;
  int niter_out = 0;
  Real g0_soa_out = 0;

  // clang-format off
  const Real in_dgn_awet[10][num_mode] = {
      {1.2730137346646958E-007, 2.9756030032807321E-008, 2.3266870254473761E-006, 5.2963711345420440E-008},
      {1.2705960055085835E-007, 2.7734941184652717E-008, 2.3266884562632178E-006, 5.2963714752164382E-008},
      {1.2683434225239912E-007, 2.6215113455705486E-008, 2.3266898858024220E-006, 5.2963718156609192E-008},
      {1.2661202400655583E-007, 2.5014309755008241E-008, 2.3266913140626734E-006, 5.2963721559294933E-008},
      {1.2639258815520725E-007, 2.4034073019665245E-008, 2.3266927410421792E-006, 5.2963724960215609E-008},
      {1.2617597858658348E-007, 2.3214181904901140E-008, 2.3266941667395634E-006, 5.2963728359365464E-008},
      {1.2596214066904354E-007, 2.2515366655191507E-008, 2.3266955911537830E-006, 5.2963731756739064E-008},
      {1.2575102119539438E-007, 2.1910734015633354E-008, 2.3266970142840733E-006, 5.2963735121543830E-008},
      {1.2554256709308087E-007, 2.1381138917843580E-008, 2.3266984361299039E-006, 5.2963738484405470E-008},
      {1.2533672910075211E-007, 2.0912516507927464E-008, 2.3266998566909396E-006, 5.2963741845320131E-008}};

  const Real in_qgas_cur[10][GasAerExch::num_gas_to_aer] = {
      {9.6553333333333350E-011, 1.9196785428799816E-011}, {9.6527006887562334E-011, 1.9086214760312434E-011},
      {9.6500000938272380E-011, 1.8976247287593632E-011}, {9.6472386498308437E-011, 1.8866887254711152E-011},
      {9.6444215734769392E-011, 1.8758137002205340E-011}, {9.6415528410418888E-011, 1.8649997611709737E-011},
      {9.6386355964013475E-011, 1.8542469312491037E-011}, {9.6356723957768474E-011, 1.8435551727542304E-011},
      {9.6326653640622787E-011, 1.8329244032180201E-011}, {9.6296162996540997E-011, 1.8223545061331766E-011}};

  const Real out_qgas_cur[10][GasAerExch::num_gas_to_aer] = {
      {9.6509455923714994E-011, 1.9186478479542893E-011}, {9.6481996972079069E-011, 1.9075689647601013E-011},
      {9.6453976871665825E-011, 1.8965535507319710E-011}, {9.6425435225743332E-011, 1.8856012195377293E-011},
      {9.6396403527518612E-011, 1.8747116703918971E-011}, {9.6366907666409818E-011, 1.8638846508988273E-011},
      {9.6336969286938487E-011, 1.8531199282280415E-011}, {9.6306606762525623E-011, 1.8424172760283460E-011},
      {9.6275835900486453E-011, 1.8317764682923683E-011}, {9.6244670461294293E-011, 1.8211972765021210E-011}};

  const Real in_qgas_avg[10][GasAerExch::num_gas_to_aer] = {
      {0.0000000000000000, 0.0000000000000000}, {6.8037089632647984E-011, 0.0000000000000000},
      {6.8041833020356950E-011, 0.0000000000000000}, {6.8041835809074221E-011, 0.0000000000000000},
      {6.8041838707192410E-011, 0.0000000000000000}, {6.8041841700386234E-011, 0.0000000000000000},
      {6.8041844784376895E-011, 0.0000000000000000}, {6.8041847954958489E-011, 0.0000000000000000},
      {6.8041851208127089E-011, 0.0000000000000000}, {6.8041854572127978E-011, 0.0000000000000000}};

  const Real out_qgas_avg[10][GasAerExch::num_gas_to_aer] = {
      {9.6531394628524172E-011, 1.9191631470368576E-011}, {9.6504501929820708E-011, 1.9080951697012725E-011},
      {9.6476988904969096E-011, 1.8970890869739010E-011}, {9.6448910862025885E-011, 1.8861449178322882E-011},
      {9.6420309631144009E-011, 1.8752626288706048E-011}, {9.6391218038414353E-011, 1.8644421479455502E-011},
      {9.6361662625475987E-011, 1.8536833700859000E-011}, {9.6331665360147049E-011, 1.8429861632514369E-011},
      {9.6301244770554620E-011, 1.8323503731934381E-011}, {9.6270416728917645E-011, 1.8217758273907820E-011}};

  const Real in_qnum_cur[10][num_mode] = {
      {2253176148.8415728, 22531761488.415726, 2253176.1488415725, 4506352297.6831455},
      {2267354470.8688984, 28096548405.082268, 2253176.1488415725, 4493005221.2837601},
      {2280636572.1462731, 33623084511.508896, 2253176.1488415725, 4479721687.5141335},
      {2293855535.0809383, 39111314632.445099, 2253176.1488415725, 4466501292.3448601},
      {2307011761.0077333, 44561859089.583748, 2253176.1488415725, 4453343634.4450903},
      {2320105648.9039097, 49975234383.822784, 2253176.1488415725, 4440248314.8414478},
      {2333137595.8810577, 55351887329.363480, 2253176.1488415725, 4427214936.4261065},
      {2346107997.3360257, 60692215413.809937, 2253176.1488415725, 4414243115.1394472},
      {2359017321.4428835, 65996578603.660851, 2253176.1488415725, 4401332371.5071554},
      {2371865887.9274158, 71265311432.379608, 2253176.1488415725, 4388482385.8063889}};

  const Real out_qnum_cur[10][num_mode] = {
      {2253176148.8415728, 22531761488.415726, 2253176.1488415725, 4506352297.6831455},
      {2267354470.8688984, 28096548405.082268, 2253176.1488415725, 4493005221.2837601},
      {2280636572.1462731, 33623084511.508896, 2253176.1488415725, 4479721687.5141335},
      {2293855535.0809383, 39111314632.445099, 2253176.1488415725, 4466501292.3448601},
      {2307011761.0077333, 44561859089.583748, 2253176.1488415725, 4453343634.4450903},
      {2320105648.9039097, 49975234383.822784, 2253176.1488415725, 4440248314.8414478},
      {2333137595.8810577, 55351887329.363480, 2253176.1488415725, 4427214936.4261065},
      {2346107997.3360257, 60692215413.809937, 2253176.1488415725, 4414243115.1394472},
      {2359017321.4428835, 65996578603.660851, 2253176.1488415725, 4401332371.5071554},
      {2371865887.9274158, 71265311432.379608, 2253176.1488415725, 4388482385.8063889}};

  const Real in_qaer_cur[10][num_aer][num_mode] = {
      {{2.6484092473027481E-011, 1.9963569502625346E-012, 1.5918312530745280E-010, 0.0000000000000000},
       {3.4543891238118817E-011, 2.6039003387624214E-012, 1.3841779609564249E-010, 0.0000000000000000},
       {8.8280308243424948E-012, 0.0000000000000000, 5.3061041769150928E-011, 1.8930709966834831E-012},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 9.4653549834174144E-011},
       {6.8037089632648010E-011, 6.8381333387002354E-012, 5.4525090614694067E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6503536741801054E-011, 2.0025136509558159E-012, 1.5918385078375702E-010, 0.0000000000000000},
       {3.4550145466431223E-011, 2.7085381034471938E-012, 1.3841797477113269E-010, 0.0000000000000000},
       {8.8336374259337096E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8874643950922682E-012},
       {2.8033007956074111E-013, 0.0000000000000000, 0.0000000000000000, 9.4373219754613398E-011},
       {6.8041833020356976E-011, 6.8333899509912703E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6521610719293518E-011, 2.0107203530247373E-012, 1.5918457605348562E-010, 0.0000000000000000},
       {3.4554573528111080E-011, 2.8143998693114451E-012, 1.3841815241630738E-010, 0.0000000000000000},
       {8.8392173363359950E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8818844846899841E-012},
       {5.5932559967495294E-013, 0.0000000000000000, 0.0000000000000000, 9.4094224234499180E-011},
       {6.8041835809074247E-011, 6.8333871622740026E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6539704270956335E-011, 2.0195161824053184E-012, 1.5918530111240613E-010, 0.0000000000000000},
       {3.4558982187451026E-011, 2.9196746222338241E-012, 1.3841832903692752E-010, 0.0000000000000000},
       {8.8447707252029182E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8763310958230596E-012},
       {8.3699504302120706E-013, 0.0000000000000000, 0.0000000000000000, 9.3816554791152974E-011},
       {6.8041838707192410E-011, 6.8333842641558271E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6557817071656307E-011, 2.0288493010656621E-012, 1.5918602595658487E-010, 0.0000000000000000},
       {3.4563371464457567E-011, 3.0243599959047575E-012, 1.3841850463875586E-010, 0.0000000000000000},
       {8.8502977611131048E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8708040599128731E-012},
       {1.1133468385304902E-012, 0.0000000000000000, 0.0000000000000000, 9.3540202995643655E-011},
       {6.8041841700386234E-011, 6.8333812709620024E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6575948808124837E-011, 2.0386802632070311E-012, 1.5918675058232543E-010, 0.0000000000000000},
       {3.4567741385312547E-011, 3.1284548767492370E-012, 1.3841867922755203E-010, 0.0000000000000000},
       {8.8557986116549315E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8653032093710488E-012},
       {1.3883893656217149E-012, 0.0000000000000000, 0.0000000000000000, 9.3265160468552428E-011},
       {6.8041844784376921E-011, 6.8333781869713293E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6594099174922756E-011, 2.0489779390131787E-012, 1.5918747498612678E-010, 0.0000000000000000},
       {3.4572091978034984E-011, 3.2319590017286081E-012, 1.3841885280906893E-010, 0.0000000000000000},
       {8.8612734436331850E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8598283773927957E-012},
       {1.6621309645343744E-012, 0.0000000000000000, 0.0000000000000000, 9.2991418869639779E-011},
       {6.8041847954958515E-011, 6.8333750163897361E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6612267873638493E-011, 2.0597170680181687E-012, 1.5918819916465102E-010, 0.0000000000000000},
       {3.4576423272432240E-011, 3.3348727122992813E-012, 1.3841902538904974E-010, 0.0000000000000000},
       {8.8667224216050825E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8543793994208945E-012},
       {1.9345798631294020E-012, 0.0000000000000000, 0.0000000000000000, 9.2718969971044728E-011},
       {6.8041851208127089E-011, 6.8333717632211462E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6630454621981795E-011, 2.0708766867727292E-012, 1.5918892311469891E-010, 0.0000000000000000},
       {3.4580735316449740E-011, 3.4371967794683046E-012, 1.3841919697322532E-010, 0.0000000000000000},
       {8.8721457437407424E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8489560772852367E-012},
       {2.2057459699123070E-012, 0.0000000000000000, 0.0000000000000000, 9.2447803864261859E-011},
       {6.8041854572127978E-011, 6.8333683992202610E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6648659124395596E-011, 2.0824391099494076E-012, 1.5918964683319025E-010, 0.0000000000000000},
       {3.4585028127638834E-011, 3.5389323450407532E-012, 1.3841936756731221E-010, 0.0000000000000000},
       {8.8775435443365300E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8435582766894486E-012},
       {2.4756359997017039E-012, 0.0000000000000000, 0.0000000000000000, 9.2177913834472458E-011},
       {6.8041858012004618E-011, 6.8333649593436193E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}}};

  const Real out_qaer_cur[10][num_aer][num_mode] = {
      {{2.6506554173821820E-011, 2.0089406779724696E-012, 1.5918433443462643E-010, 7.6228539404785740E-015},
       {3.4549423266828319E-011, 2.6069998791040425E-012, 1.3841809388812617E-010, 1.8775877221248125E-015},
       {8.8280308243424948E-012, 0.0000000000000000, 5.3061041769150928E-011, 1.8930709966834831E-012},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 9.4653549834174144E-011},
       {6.8037089632648010E-011, 6.8381333387002354E-012, 5.4525090614694067E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6526060558274808E-011, 2.0161928590898524E-012, 1.5918505956663797E-010, 7.5981079945285652E-015},
       {3.4555662376258777E-011, 2.7118890003400572E-012, 1.3841827084642385E-010, 1.8612306998486968E-015},
       {8.8336374259337096E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8874643950922682E-012},
       {2.8033007956074111E-013, 0.0000000000000000, 0.0000000000000000, 9.4373219754613398E-011},
       {6.8041833020356976E-011, 6.8333899509912703E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6544191768964884E-011, 2.0253815003050633E-012, 1.5918578448501985E-010, 7.5734381206369395E-015},
       {3.4560074156105117E-011, 2.8179716297085476E-012, 1.3841844678400762E-010, 1.8450241825440182E-015},
       {8.8392173363359950E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8818844846899841E-012},
       {5.5932559967495294E-013, 0.0000000000000000, 0.0000000000000000, 9.4094224234499180E-011},
       {6.8041835809074247E-011, 6.8333871622740026E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6562341939380280E-011, 2.0350728658608835E-012, 1.5918650918603736E-010, 7.5488470543462395E-015},
       {3.4564466423235679E-011, 2.9234438090369814E-012, 1.3841862170664142E-010, 1.8289670321569599E-015},
       {8.8447707252029182E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8763310958230596E-012},
       {8.3699504302120706E-013, 0.0000000000000000, 0.0000000000000000, 9.3816554791152974E-011},
       {6.8041838707192410E-011, 6.8333842641558271E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6580510757178179E-011, 2.0452357763688727E-012, 1.5918723366615248E-010, 7.5243368580691534E-015},
       {3.4568839202426779E-011, 3.0283085168251816E-012, 1.3841879562008280E-010, 1.8130580698129665E-015},
       {8.8502977611131048E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8708040599128731E-012},
       {1.1133468385304902E-012, 0.0000000000000000, 0.0000000000000000, 9.3540202995643655E-011},
       {6.8041841700386234E-011, 6.8333812709620024E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6598697920527397E-011, 2.0558446460173779E-012, 1.5918795792199435E-010, 7.4999091272030402E-015},
       {3.4573192524433275E-011, 3.1325682417322939E-012, 1.3841896853008018E-010, 1.7972960895205187E-015},
       {8.8557986116549315E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8653032093710488E-012},
       {1.3883893656217149E-012, 0.0000000000000000, 0.0000000000000000, 9.3265160468552428E-011},
       {6.8041844784376921E-011, 6.8333781869713293E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6616903134380040E-011, 2.0668781273211673E-012, 1.5918868195033388E-010, 7.4755651026051644E-015},
       {3.4577526421668389E-011, 3.2362252751403981E-012, 1.3841914044237027E-010, 1.7816798640992575E-015},
       {8.8612734436331850E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8598283773927957E-012},
       {1.6621309645343744E-012, 0.0000000000000000, 0.0000000000000000, 9.2991418869639779E-011},
       {6.8041847954958515E-011, 6.8333750163897361E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6635126109889386E-011, 2.0783181378346488E-012, 1.5918940574806413E-010, 7.4513057623949036E-015},
       {3.4581840928172393E-011, 3.3392818420384053E-012, 1.3841931136267571E-010, 1.7662081536054488E-015},
       {8.8667224216050825E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8543793994208945E-012},
       {1.9345798631294020E-012, 0.0000000000000000, 0.0000000000000000, 9.2718969971044728E-011},
       {6.8041851208127089E-011, 6.8333717632211462E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6653366574001618E-011, 2.0901491456814187E-012, 1.5919012931218446E-010, 7.4271317222833722E-015},
       {3.4586136096057272E-011, 3.4417401459663029E-012, 1.3841948129670346E-010, 1.7508796728450361E-015},
       {8.8721457437407424E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8489560772852367E-012},
       {2.2057459699123070E-012, 0.0000000000000000, 0.0000000000000000, 9.2447803864261859E-011},
       {6.8041854572127978E-011, 6.8333683992202610E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{2.6671624239184034E-011, 2.1023576801252888E-012, 1.5919085263978767E-010, 7.4030436849844711E-015},
       {3.4590411946750202E-011, 3.5436024462173347E-012, 1.3841965025014331E-010, 1.7356931914926501E-015},
       {8.8775435443365300E-012, 0.0000000000000000, 5.3061041769150941E-011, 1.8435582766894486E-012},
       {2.4756359997017039E-012, 0.0000000000000000, 0.0000000000000000, 9.2177913834472458E-011},
       {6.8041858012004618E-011, 6.8333649593436193E-012, 5.4525090614694077E-010, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}}};

  const Real in_uptkaer[10][AeroConfig::num_gas_ids()][num_mode] = {
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516789173297778E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516799808257626E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516810433728653E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516821049693655E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516831656139272E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516842253055303E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516852840433991E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516863418269646E-005, 0.0000000000000000}},
      {{0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000},
       {0.0000000000000000, 0.0000000000000000, 1.5516873986558298E-005, 0.0000000000000000}}};

  const Real out_uptkaer[10][AeroConfig::num_gas_ids()][num_mode] = {
      {{2.3348424017477054E-004, 1.3081888391345016E-004, 1.2568599230371201E-005, 7.9245276133272380E-005},
       {2.8825214836391422E-004, 1.6150479495487672E-004, 1.5516789173297778E-005, 9.7833674238607867E-005}},
      {{2.3419676754084476E-004, 1.4224796946135635E-004, 1.2568607844688678E-005, 7.9010574248491373E-005},
       {2.8913181177882068E-004, 1.7561477711278560E-004, 1.5516799808257626E-005, 9.7543918825297989E-005}},
      {{2.3486029017849103E-004, 1.5250343855672158E-004, 1.2568616451320209E-005, 7.8776989712563090E-005},
       {2.8995097552900125E-004, 1.8827585007002664E-004, 1.5516810433728653E-005, 9.7255542855016150E-005}},
      {{2.3551908514198470E-004, 1.6186675089588398E-004, 1.2568625050251861E-005, 7.8544515422514062E-005},
       {2.9076430264442552E-004, 1.9983549493319009E-004, 1.5516821049693655E-005, 9.6968537558659326E-005}},
      {{2.3617321464929148E-004, 1.7055222546106399E-004, 1.2568633641472810E-005, 7.8313144321275085E-005},
       {2.9157186993739688E-004, 2.1055830303835061E-004, 1.5516831656139272E-005, 9.6682894223796390E-005}},
      {{2.3682273971983953E-004, 1.7870363298035669E-004, 1.2568642224974797E-005, 7.8082869393229732E-005},
       {2.9237375274054260E-004, 2.2062176911155144E-004, 1.5516842253055303E-005, 9.6398604189172510E-005}},
      {{2.3746772021405663E-004, 1.8642243608538061E-004, 1.2568650800751533E-005, 7.7853683655567285E-005},
       {2.9317002495562544E-004, 2.3015115566096369E-004, 1.5516852840433991E-005, 9.6115658834033686E-005}},
      {{2.3810821486193015E-004, 1.9378307918246950E-004, 1.2568659368798415E-005, 7.7625580269462298E-005},
       {2.9396075908880262E-004, 2.3923836936107343E-004, 1.5516863418269646E-005, 9.5834049715385553E-005}},
      {{2.3874428481763035E-004, 2.0084189025518698E-004, 1.2568667929112222E-005, 7.7398550889192167E-005},
       {2.9474603063904981E-004, 2.4795295093232958E-004, 1.5516873986558298E-005, 9.5553766529866868E-005}},
      {{2.3937598325266305E-004, 2.0764257451984073E-004, 1.2568676481690979E-005, 7.7172589892774207E-005},
       {2.9552590525020128E-004, 2.5634885743190211E-004, 1.5516884545297504E-005, 9.5274802336758267E-005}}};
  // clang-format on

  for (int n = 0; n < 10; ++n) {

    Real dgn_awet[num_mode] = {};
    for (int i = 0; i < num_mode; ++i)
      dgn_awet[i] = in_dgn_awet[n][i];

    Real qgas_cur[num_gas] = {};
    qgas_cur[igas_soag] = in_qgas_cur[n][0];
    qgas_cur[igas_h2so4] = in_qgas_cur[n][1];

    Real qgas_avg[num_gas] = {};
    qgas_avg[igas_soag] = in_qgas_avg[n][0];
    qgas_avg[igas_h2so4] = in_qgas_avg[n][1];

    Real qnum_cur[num_mode] = {};
    for (int i = 0; i < num_mode; ++i)
      qnum_cur[i] = in_qnum_cur[n][i];

    Real qaer_cur[num_aer][num_mode] = {};
    for (int j = 0; j < num_aer; ++j)
      for (int i = 0; i < num_mode; ++i)
        qaer_cur[j][i] = in_qaer_cur[n][j][i];

    Real uptkaer[num_gas][num_mode] = {};
    for (int i = 0; i < num_mode; ++i) {
      uptkaer[igas_soag][i] = in_uptkaer[n][0][i];
      uptkaer[igas_h2so4][i] = in_uptkaer[n][1][i];
    }
    AeroId gas_to_aer[num_gas];
    for (int i = 0; i < num_gas; ++i) {
      const AeroId air = GasAerExch::gas_to_aer(static_cast<GasId>(i));
      gas_to_aer[i] = air;
    }

    Real uptk_rate_factor[num_gas];
    for (int i = 0; i < num_gas; ++i)
      uptk_rate_factor[i] = GasAerExch::uptk_rate_factor(i);

    int ntot_soamode = 4;
    gasaerexch::mam_gasaerexch_1subarea(
        nghq, igas_h2so4, igas_nh3, ntot_soamode, gas_to_aer, iaer_so4,
        iaer_pom, l_calc_gas_uptake_coeff, l_gas_condense_to_mode,
        eqn_and_numerics_category, dt, dtsub_soa_fixed, temp, pmid, aircon,
        ngas, qgas_cur, qgas_avg, qgas_netprod_otrproc, qaer_cur, qnum_cur,
        dgn_awet, alnsg_aer, uptk_rate_factor, uptkaer, uptkrate_h2so4,
        niter_out, g0_soa_out);

    if (!(qgas_cur[igas_soag] == Approx(out_qgas_cur[n][0]).epsilon(epsilon)))
      std::cout << "qgas_cur != Approx(test_qgas_cur)): "
                << std::setprecision(14) << qgas_cur[igas_soag]
                << " != " << out_qgas_cur[n][0] << std::endl;
    REQUIRE(qgas_cur[igas_soag] == Approx(out_qgas_cur[n][0]).epsilon(epsilon));

    if (!(qgas_cur[igas_h2so4] == Approx(out_qgas_cur[n][1]).epsilon(epsilon)))
      std::cout << "qgas_cur != Approx(test_qgas_cur)): "
                << std::setprecision(14) << qgas_cur[igas_h2so4]
                << " != " << out_qgas_cur[n][1] << std::endl;
    REQUIRE(qgas_cur[igas_h2so4] ==
            Approx(out_qgas_cur[n][1]).epsilon(epsilon));

    if (!(qgas_avg[igas_soag] == Approx(out_qgas_avg[n][0]).epsilon(epsilon)))
      std::cout << "qgas_avg != Approx(test_qgas_avg)): "
                << std::setprecision(14) << qgas_avg[igas_soag]
                << " != " << out_qgas_avg[n][0] << std::endl;
    REQUIRE(qgas_avg[igas_soag] == Approx(out_qgas_avg[n][0]).epsilon(epsilon));

    if (!(qgas_avg[igas_h2so4] == Approx(out_qgas_avg[n][1]).epsilon(epsilon)))
      std::cout << "qgas_avg != Approx(test_qgas_avg)): "
                << std::setprecision(14) << qgas_avg[igas_h2so4]
                << " != " << out_qgas_avg[n][1] << std::endl;
    REQUIRE(qgas_avg[igas_h2so4] ==
            Approx(out_qgas_avg[n][1]).epsilon(epsilon));

    for (int i = 0; i < num_mode; ++i) {
      if (!(qnum_cur[i] == Approx(out_qnum_cur[n][i]).epsilon(epsilon)))
        std::cout << "qnum_cur[i] != Approx(test_qnum_cur[i])): "
                  << std::setprecision(14) << qnum_cur[i]
                  << " != " << out_qnum_cur[n][i] << " (n,i):(" << n << "," << i
                  << ")" << std::endl;
      REQUIRE(qnum_cur[i] == Approx(out_qnum_cur[n][i]).epsilon(epsilon));
    }
    for (int j = 0; j < num_aer; ++j) {
      for (int i = 0; i < num_mode; ++i) {
        if (!(qaer_cur[j][i] == Approx(out_qaer_cur[n][j][i]).epsilon(epsilon)))
          std::cout << "qaer_cur[" << j << "][" << i
                    << "] != Approx(test_qaer_cur[" << n << "][" << j << "]["
                    << i << "])): " << std::setprecision(14) << qaer_cur[j][i]
                    << " != " << out_qaer_cur[n][j][i] << std::endl;
        REQUIRE(qaer_cur[j][i] ==
                Approx(out_qaer_cur[n][j][i]).epsilon(epsilon));
      }
    }

    for (int i = 0; i < num_mode; ++i) {
      if (!(uptkaer[igas_soag][i] ==
            Approx(out_uptkaer[n][0][i]).epsilon(epsilon)))
        std::cout << "uptkaer != Approx(test_uptkaer)): "
                  << std::setprecision(14) << uptkaer[igas_soag][i]
                  << " != " << out_uptkaer[n][0][i] << std::endl;
      REQUIRE(uptkaer[igas_soag][i] ==
              Approx(out_uptkaer[n][0][i]).epsilon(epsilon));
    }
    for (int i = 0; i < num_mode; ++i) {
      if (!(uptkaer[igas_h2so4][i] ==
            Approx(out_uptkaer[n][1][i]).epsilon(epsilon)))
        std::cout << "uptkaer != Approx(test_uptkaer)): "
                  << std::setprecision(14) << uptkaer[igas_h2so4][i]
                  << " != " << out_uptkaer[n][0][i] << std::endl;
      REQUIRE(uptkaer[igas_h2so4][i] ==
              Approx(out_uptkaer[n][1][i]).epsilon(epsilon));
    }
  }
}
