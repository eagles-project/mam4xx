name: AT2 Prototype

on:
  # Runs on PRs against main
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, ready_for_review, reopened]
    paths:
      # first, yes to these
      - '.github/workflows/at2_snl.yml'
      - 'src/mam4xx'
      - 'src/tests'
      - 'src/validation/**'
      # second, no to these
      - '!src/tests/data/**'
      # not sure whether this should be disabled--keep for now
      # - '!src/validation/mam_x_validation/**'

  # Manual run
  workflow_dispatch:
    inputs:
      job_to_run:
        description: 'Job to run'
        required: true
        type: choice
        options:
          - gcc-openmp
          - gcc-cuda
          - all

  # # Add schedule trigger for nightly runs at midnight MT (Standard Time)
  # schedule:
  #   - cron: '0 7 * * *'  # Runs at 7 AM UTC, which is midnight MT during Standard Time

concurrency:
  # Two runs are in the same group if they are testing the same git ref
  #  - if trigger=pull_request, the ref is refs/pull/<PR_NUMBER>/merge
  #  - for other triggers, the ref is the branch tested
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gcc-cuda:
    runs-on:  [self-hosted, m4xci-snl-cuda, cuda, gcc]
    # will run other tests in the matrix even if one fails
    # NOTE: prioritizes extra info over speed, so consider whether this makes sense
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        build-type: [Debug, Release]
        fp-precision: [single, double]
    name: gcc-cuda / ${{ matrix.build-type }} - ${{ matrix.fp-precision }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          show-progress: false
          submodules: recursive
      - name: Cloning Haero
        uses: actions/checkout@v3
        with:
          repository: eagles-project/haero
          submodules: recursive
          path: haero_src
      - name: Show action trigger
        uses: ./.github/actions/show-workflow-trigger
      - name: Get CUDA Arch
        # NOTE: for now, only running on an H100 machine, but keep anyway
        run: |
          # Ensure nvidia-smi is available
          if ! command -v nvidia-smi &> /dev/null; then
              echo "nvidia-smi could not be found. Please ensure you have Nvidia drivers installed."
              exit 1
          fi

          # Get the GPU model from nvidia-smi, and set env for next step
          gpu_model=$(nvidia-smi --query-gpu=name --format=csv,noheader | head -n 1)
          case "$gpu_model" in
              *"H100"*)
                  echo "Hopper=ON" >> $GITHUB_ENV
                  echo "CUDA_ARCH=90" >> $GITHUB_ENV
                  ARCH=90
                  ;;
              *"A100"*)
                  echo "Ampere=ON" >> $GITHUB_ENV
                  echo "CUDA_ARCH=80" >> $GITHUB_ENV
                  ;;
              *"V100"*)
                  echo "Volta=ON" >> $GITHUB_ENV
                  echo "CUDA_ARCH=70" >> $GITHUB_ENV
                  ;;
              *)
                  echo "Unsupported GPU model: $gpu_model"
                  exit 1
                  ;;
          esac
      - name: Building Haero (${{ matrix.build-type }}, ${{ matrix.fp-precision }} precision)
        run: |
          cmake -S haero_src -B haero_build \
             -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
             -DCMAKE_INSTALL_PREFIX="haero_install" \
             -DCMAKE_C_COMPILER=gcc \
             -DCMAKE_CXX_COMPILER=g++ \
             -DHAERO_ENABLE_MPI=OFF \
             -DHAERO_ENABLE_GPU=ON \
             -DHAERO_PRECISION=${{ matrix.fp-precision }}
          cd haero_build
          make -j
          make install
      - name: Configuring MAM4xx (${{ matrix.build-type }}, ${{ matrix.fp-precision }} precision)
        run: |
          cmake -S . -B build \
            -DCMAKE_INSTALL_PREFIX=`pwd`/install \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DMAM4XX_HAERO_DIR=`pwd`/haero_install \
            -DNUM_VERTICAL_LEVELS=72 \
            -DENABLE_COVERAGE=OFF \
            -G "Unix Makefiles"
      - name: Building MAM4xx (${{ matrix.build-type }}, ${{ matrix.fp-precision }} precision)
        run: |
          cd build
          make
      - name: Running tests (${{ matrix.build-type }}, ${{ matrix.fp-precision }} precision)
        run: |
          cd build
          ctest -V --output-on-failure
