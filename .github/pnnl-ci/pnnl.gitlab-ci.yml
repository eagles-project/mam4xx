workflow:
stages:
# While we could put this in a matrix with more runners,
# This maximizes the number of concurrent builds that can run
  - haero-single
  - haero-double
  - build-single
  - build-double

# Runner with HPC/SLURM connection
.pnnl_tags_template:
  image: kfox1111/slurm:deception2
  tags:
    - k8s
    - ikp
    - eagles
    - marianas
    - deception

# This runner isn't configured correctly, but would be useful for linting
# # Basic Ubuntu image for Cleanup/Linting
# .pnnl_nonhpc_tags:
#   image: ubuntu:20.04
#   tags:
#     - k8s
#     - ikp
#     - eagles
#     - basic

variables:
  # Since submodules are cloned manually in CI, this is none
  # If we were to use HTTPS instead of SSH, this could be recursive
  GIT_SUBMODULE_STRATEGY: none
  GIT_STRATEGY: clone

.pnnl_base_template:
  retry: 2
  extends:
    - .pnnl_tags_template
    - .pnnl_script_template
    - .pnnl_after_script_template
  variables:
    SYSTEM_NAME: deception
    WORKDIR_SUFFIX: haero_${BUILD_TYPE}_${PRECISION}
    HAERO_INSTALL: /qfs/projects/eagles/pnnl-ci/haero_${BUILD_TYPE}_${PRECISION}

# Generic job for building HAERO/mam4xx
.pnnl_hpc_job_template:
  extends:
    - .pnnl_base_template
  variables:
  # We can hard code the SLURM_Q, or have a perl script find any idle partition at runtime.
  # This is a magic string that matches a conditional in the job script
    SLURM_Q: "dl_gpu"
    SLURM_ARGS: "-N 1 --ntasks=8 --gres=gpu:1"
    SCRIPT_NAME: ci.sh

# Generic haero rebuild template
.haero_rebuild_template:
  extends:
    - .pnnl_base_template
  rules:
    - if: '$CI_COMMIT_TITLE =~ /\[haero-rebuild\]/'
      when: always
    - if: '$CI_COMMIT_TITLE =~ /\[rebuild-haero\]/'
      when: always
    - when: manual
  allow_failure: true
  variables:
  # We are just building, so might as well use CPU nodes
    SLURM_Q: "short"
    SLURM_ARGS: "-N 1 --exclusive"
    SCRIPT_NAME: rebuild-haero.sh

.debug:
  resource_group: Debug
  variables:
    BUILD_TYPE: Debug

.release:
  resource_group: Release
  variables:
    BUILD_TYPE: Release

.pnnl_after_script_template:
  after_script:
    - export WORKDIR=$HOME/gitlab/${CI_PIPELINE_ID}/${WORKDIR_SUFFIX}
      # Iterate over possible jobid named files (jobid_%J)
    - job_ids="$WORKDIR/jobid_*"
    - |
      for job in $job_ids
      do
        if [[ -f "$job" ]]; then
          jobid=$(cat "$job")
          scancel $jobid
        fi
      done
    - rm -rf $WORKDIR

.pnnl_script_template:
  script:
    - |
      set -xv
      #  NOTES:  WORKDIR is on constance/deception/newell
      #          ./      is only on the Kubernetes instance
      #          Comments in multi line YAML are buggy,
      #          So make sure to indent at same level

      export WORKDIR="$HOME/gitlab/${CI_PIPELINE_ID}/${WORKDIR_SUFFIX}"
      mkdir -p $WORKDIR
      cp -r . $WORKDIR
      cd $WORKDIR

      # Unique output file for this stage
      output="output"
      echo -n > $output
      tail -f $output &
      tailpid=$!

      # Some variables need to be exported to propogate to scripts
      export HAERO_INSTALL=$HAERO_INSTALL 
      export BUILD_TYPE=$BUILD_TYPE
      export PRECISION=$PRECISION
      export SYSTEM_NAME=$SYSTEM_NAME

      # Use perl script if MY_CLUSTER is something specific
      if [[ $SLURM_Q = "dl_gpu" ]]; then
        # This is any idle DL node.
        # Results in the following possible GPU archs:
        #   - P100 (cuda_arch 60) (dl/dl_shared)
        #   - V100 (cuda_arch 70) (dlv/dlv_shared)
        #   - RTX 2080 Ti (cuda_arch 75) (dlt/dlt_shared)
        export SLURM_Q=`perl ./.github/pnnl-ci/findIdleDLNodes.pl`
      fi

      # jobid used in pnnl_after_script_template to cancel job if cancelled or
      # timed out by gitlab through the UI
      # We use a template script name so that each pipeline stage can re-use same script configuration
      jobid=$(sbatch --export=ALL -A EAGLES $SLURM_ARGS -p $SLURM_Q -o $output -e $output -t 1:00:00 $WORKDIR/.github/pnnl-ci/$SCRIPT_NAME)
      export jobid=$(echo $jobid | cut -f4 -d' ')
      # Unique jobid filename for this job
      echo $jobid > "$WORKDIR/jobid_${jobid}"
      res=1
     
      while :;
      do
        if [[ "$(awk 'BEGIN{i=0}/BUILD_STATUS/{i++}END{print i}' $output)" != "0" ]]; then
          kill $tailpid
          echo 'Last tail of build $output:'
          tail -n 200 $output
          res=$(grep BUILD_STATUS $output | tail -n 1 | cut -f2 -d':')
          break
        fi
        sleep 10
      done

      echo "Finished batch job with exit code: $res"
      rm "$WORKDIR/jobid_${jobid}"
      exit $res

SVC Account Cleanup:
  resource_group: Debug
  stage: .pre
  extends:
    - .pnnl_tags_template
  # No need to clone for non-hpc jobs in CI
  variables:
    GIT_STRATEGY: none
  script:
    - export WORKDIR="$HOME/gitlab/"
    # clears directory of files more than 6 hours/360 minutes old
    - find $WORKDIR -type d -mindepth 1 -mmin +360 -prune -print -exec rm -rf {} \; || true
    - ls -hal $WORKDIR

# Since we only have two runners, we should run builds one after the other to ensure
# Two developers can run pipelines at the same time.
Deception Debug Single Precision:
  extends:
    - .pnnl_hpc_job_template
    - .debug
  stage: build-single
  variables:
    PRECISION: single

Deception Release Single Precision:
  extends:
    - .pnnl_hpc_job_template
    - .release
  stage: build-single
  variables:
    PRECISION: single

Deception Debug Double Precision:
  needs: ['Deception Debug Single Precision']
  extends:
    - .pnnl_hpc_job_template
    - .debug
  stage: build-double
  variables:
    PRECISION: double

Deception Release Double Precision:
  needs: ['Deception Release Single Precision']
  extends:
    - .pnnl_hpc_job_template
    - .release
  stage: build-double
  variables:
    PRECISION: double

Rebuild HAERO Debug Single Precision:
  extends:
    - .haero_rebuild_template
    - .debug
  stage: haero-single
  variables:
    PRECISION: single

Rebuild HAERO Release Single Precision:
  extends:
    - .haero_rebuild_template
    - .release
  stage: haero-single
  variables:
    PRECISION: single

Rebuild HAERO Debug Double Precision:
  needs: ['Rebuild HAERO Debug Single Precision']
  extends:
    - .haero_rebuild_template
    - .debug
  stage: haero-double
  variables:
    PRECISION: double

Rebuild HAERO Release Double Precision:
  needs: ['Rebuild HAERO Release Single Precision']
  extends:
    - .haero_rebuild_template
    - .release
  stage: haero-double
  variables:
    PRECISION: double
# ---
